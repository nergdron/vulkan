// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 11 May 2022 13:45:21 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package vulkan

/*
#cgo CFLAGS: -I. -DVK_NO_PROTOTYPES
#include "vulkan/vulkan.h"
#include "vk_wrapper.h"
#include "vk_bridge.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// CreateInstance function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateInstance.html
func CreateInstance(pCreateInfo *InstanceCreateInfo, pAllocator *AllocationCallbacks, pInstance *Instance) Result {
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpInstance, cpInstanceAllocMap := (*C.VkInstance)(unsafe.Pointer(pInstance)), cgoAllocsUnknown
	__ret := C.callVkCreateInstance(cpCreateInfo, cpAllocator, cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyInstance function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyInstance.html
func DestroyInstance(instance Instance, pAllocator *AllocationCallbacks) {
	cinstance, cinstanceAllocMap := *(*C.VkInstance)(unsafe.Pointer(&instance)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyInstance(cinstance, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cinstanceAllocMap)
}

// EnumeratePhysicalDevices function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumeratePhysicalDevices.html
func EnumeratePhysicalDevices(instance Instance, pPhysicalDeviceCount *uint32, pPhysicalDevices []PhysicalDevice) Result {
	cinstance, cinstanceAllocMap := *(*C.VkInstance)(unsafe.Pointer(&instance)), cgoAllocsUnknown
	cpPhysicalDeviceCount, cpPhysicalDeviceCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPhysicalDeviceCount)), cgoAllocsUnknown
	cpPhysicalDevices, cpPhysicalDevicesAllocMap := copyPPhysicalDeviceBytes((*sliceHeader)(unsafe.Pointer(&pPhysicalDevices)))
	__ret := C.callVkEnumeratePhysicalDevices(cinstance, cpPhysicalDeviceCount, cpPhysicalDevices)
	runtime.KeepAlive(cpPhysicalDevicesAllocMap)
	runtime.KeepAlive(cpPhysicalDeviceCountAllocMap)
	runtime.KeepAlive(cinstanceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceFeatures function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceFeatures.html
func GetPhysicalDeviceFeatures(physicalDevice PhysicalDevice, pFeatures *PhysicalDeviceFeatures) {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpFeatures, cpFeaturesAllocMap := pFeatures.PassRef()
	C.callVkGetPhysicalDeviceFeatures(cphysicalDevice, cpFeatures)
	runtime.KeepAlive(cpFeaturesAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
}

// GetPhysicalDeviceFormatProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceFormatProperties.html
func GetPhysicalDeviceFormatProperties(physicalDevice PhysicalDevice, format Format, pFormatProperties *FormatProperties) {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.VkFormat)(format), cgoAllocsUnknown
	cpFormatProperties, cpFormatPropertiesAllocMap := pFormatProperties.PassRef()
	C.callVkGetPhysicalDeviceFormatProperties(cphysicalDevice, cformat, cpFormatProperties)
	runtime.KeepAlive(cpFormatPropertiesAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
}

// GetPhysicalDeviceImageFormatProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceImageFormatProperties.html
func GetPhysicalDeviceImageFormatProperties(physicalDevice PhysicalDevice, format Format, kind ImageType, tiling ImageTiling, usage ImageUsageFlags, flags ImageCreateFlags, pImageFormatProperties *ImageFormatProperties) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.VkFormat)(format), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.VkImageType)(kind), cgoAllocsUnknown
	ctiling, ctilingAllocMap := (C.VkImageTiling)(tiling), cgoAllocsUnknown
	cusage, cusageAllocMap := (C.VkImageUsageFlags)(usage), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkImageCreateFlags)(flags), cgoAllocsUnknown
	cpImageFormatProperties, cpImageFormatPropertiesAllocMap := pImageFormatProperties.PassRef()
	__ret := C.callVkGetPhysicalDeviceImageFormatProperties(cphysicalDevice, cformat, ckind, ctiling, cusage, cflags, cpImageFormatProperties)
	runtime.KeepAlive(cpImageFormatPropertiesAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cusageAllocMap)
	runtime.KeepAlive(ctilingAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceProperties.html
func GetPhysicalDeviceProperties(physicalDevice PhysicalDevice, pProperties *PhysicalDeviceProperties) {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := pProperties.PassRef()
	C.callVkGetPhysicalDeviceProperties(cphysicalDevice, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
}

// GetPhysicalDeviceQueueFamilyProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html
func GetPhysicalDeviceQueueFamilyProperties(physicalDevice PhysicalDevice, pQueueFamilyPropertyCount *uint32, pQueueFamilyProperties []QueueFamilyProperties) {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpQueueFamilyPropertyCount, cpQueueFamilyPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pQueueFamilyPropertyCount)), cgoAllocsUnknown
	cpQueueFamilyProperties, cpQueueFamilyPropertiesAllocMap := unpackArgSQueueFamilyProperties(pQueueFamilyProperties)
	C.callVkGetPhysicalDeviceQueueFamilyProperties(cphysicalDevice, cpQueueFamilyPropertyCount, cpQueueFamilyProperties)
	packSQueueFamilyProperties(pQueueFamilyProperties, cpQueueFamilyProperties)
	runtime.KeepAlive(cpQueueFamilyPropertiesAllocMap)
	runtime.KeepAlive(cpQueueFamilyPropertyCountAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
}

// GetPhysicalDeviceMemoryProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceMemoryProperties.html
func GetPhysicalDeviceMemoryProperties(physicalDevice PhysicalDevice, pMemoryProperties *PhysicalDeviceMemoryProperties) {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpMemoryProperties, cpMemoryPropertiesAllocMap := pMemoryProperties.PassRef()
	C.callVkGetPhysicalDeviceMemoryProperties(cphysicalDevice, cpMemoryProperties)
	runtime.KeepAlive(cpMemoryPropertiesAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
}

// CreateDevice function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDevice.html
func CreateDevice(physicalDevice PhysicalDevice, pCreateInfo *DeviceCreateInfo, pAllocator *AllocationCallbacks, pDevice *Device) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpDevice, cpDeviceAllocMap := (*C.VkDevice)(unsafe.Pointer(pDevice)), cgoAllocsUnknown
	__ret := C.callVkCreateDevice(cphysicalDevice, cpCreateInfo, cpAllocator, cpDevice)
	runtime.KeepAlive(cpDeviceAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyDevice function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDevice.html
func DestroyDevice(device Device, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyDevice(cdevice, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// EnumerateInstanceExtensionProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateInstanceExtensionProperties.html
func EnumerateInstanceExtensionProperties(pLayerName string, pPropertyCount *uint32, pProperties []ExtensionProperties) Result {
	cpLayerName, cpLayerNameAllocMap := unpackPCharString(pLayerName)
	cpPropertyCount, cpPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPropertyCount)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := unpackArgSExtensionProperties(pProperties)
	__ret := C.callVkEnumerateInstanceExtensionProperties(cpLayerName, cpPropertyCount, cpProperties)
	packSExtensionProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	runtime.KeepAlive(cpLayerNameAllocMap)
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceExtensionProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateDeviceExtensionProperties.html
func EnumerateDeviceExtensionProperties(physicalDevice PhysicalDevice, pLayerName string, pPropertyCount *uint32, pProperties []ExtensionProperties) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpLayerName, cpLayerNameAllocMap := unpackPCharString(pLayerName)
	cpPropertyCount, cpPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPropertyCount)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := unpackArgSExtensionProperties(pProperties)
	__ret := C.callVkEnumerateDeviceExtensionProperties(cphysicalDevice, cpLayerName, cpPropertyCount, cpProperties)
	packSExtensionProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	runtime.KeepAlive(cpLayerNameAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// EnumerateInstanceLayerProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateInstanceLayerProperties.html
func EnumerateInstanceLayerProperties(pPropertyCount *uint32, pProperties []LayerProperties) Result {
	cpPropertyCount, cpPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPropertyCount)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := unpackArgSLayerProperties(pProperties)
	__ret := C.callVkEnumerateInstanceLayerProperties(cpPropertyCount, cpProperties)
	packSLayerProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceLayerProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEnumerateDeviceLayerProperties.html
func EnumerateDeviceLayerProperties(physicalDevice PhysicalDevice, pPropertyCount *uint32, pProperties []LayerProperties) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpPropertyCount, cpPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPropertyCount)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := unpackArgSLayerProperties(pProperties)
	__ret := C.callVkEnumerateDeviceLayerProperties(cphysicalDevice, cpPropertyCount, cpProperties)
	packSLayerProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceQueue function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetDeviceQueue.html
func GetDeviceQueue(device Device, queueFamilyIndex uint32, queueIndex uint32, pQueue *Queue) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cqueueFamilyIndex, cqueueFamilyIndexAllocMap := (C.uint32_t)(queueFamilyIndex), cgoAllocsUnknown
	cqueueIndex, cqueueIndexAllocMap := (C.uint32_t)(queueIndex), cgoAllocsUnknown
	cpQueue, cpQueueAllocMap := (*C.VkQueue)(unsafe.Pointer(pQueue)), cgoAllocsUnknown
	C.callVkGetDeviceQueue(cdevice, cqueueFamilyIndex, cqueueIndex, cpQueue)
	runtime.KeepAlive(cpQueueAllocMap)
	runtime.KeepAlive(cqueueIndexAllocMap)
	runtime.KeepAlive(cqueueFamilyIndexAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// QueueSubmit function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkQueueSubmit.html
func QueueSubmit(queue Queue, submitCount uint32, pSubmits []SubmitInfo, fence Fence) Result {
	cqueue, cqueueAllocMap := *(*C.VkQueue)(unsafe.Pointer(&queue)), cgoAllocsUnknown
	csubmitCount, csubmitCountAllocMap := (C.uint32_t)(submitCount), cgoAllocsUnknown
	cpSubmits, cpSubmitsAllocMap := unpackArgSSubmitInfo(pSubmits)
	cfence, cfenceAllocMap := *(*C.VkFence)(unsafe.Pointer(&fence)), cgoAllocsUnknown
	__ret := C.callVkQueueSubmit(cqueue, csubmitCount, cpSubmits, cfence)
	runtime.KeepAlive(cfenceAllocMap)
	packSSubmitInfo(pSubmits, cpSubmits)
	runtime.KeepAlive(cpSubmitsAllocMap)
	runtime.KeepAlive(csubmitCountAllocMap)
	runtime.KeepAlive(cqueueAllocMap)
	__v := (Result)(__ret)
	return __v
}

// QueueWaitIdle function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkQueueWaitIdle.html
func QueueWaitIdle(queue Queue) Result {
	cqueue, cqueueAllocMap := *(*C.VkQueue)(unsafe.Pointer(&queue)), cgoAllocsUnknown
	__ret := C.callVkQueueWaitIdle(cqueue)
	runtime.KeepAlive(cqueueAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DeviceWaitIdle function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDeviceWaitIdle.html
func DeviceWaitIdle(device Device) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	__ret := C.callVkDeviceWaitIdle(cdevice)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// AllocateMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkAllocateMemory.html
func AllocateMemory(device Device, pAllocateInfo *MemoryAllocateInfo, pAllocator *AllocationCallbacks, pMemory *DeviceMemory) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpAllocateInfo, cpAllocateInfoAllocMap := pAllocateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpMemory, cpMemoryAllocMap := (*C.VkDeviceMemory)(unsafe.Pointer(pMemory)), cgoAllocsUnknown
	__ret := C.callVkAllocateMemory(cdevice, cpAllocateInfo, cpAllocator, cpMemory)
	runtime.KeepAlive(cpMemoryAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpAllocateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// FreeMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFreeMemory.html
func FreeMemory(device Device, memory DeviceMemory, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkFreeMemory(cdevice, cmemory, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// MapMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkMapMemory.html
func MapMemory(device Device, memory DeviceMemory, offset DeviceSize, size DeviceSize, flags MemoryMapFlags, ppData *unsafe.Pointer) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory)), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.VkDeviceSize)(offset), cgoAllocsUnknown
	csize, csizeAllocMap := (C.VkDeviceSize)(size), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkMemoryMapFlags)(flags), cgoAllocsUnknown
	cppData, cppDataAllocMap := ppData, cgoAllocsUnknown
	__ret := C.callVkMapMemory(cdevice, cmemory, coffset, csize, cflags, cppData)
	runtime.KeepAlive(cppDataAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// UnmapMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkUnmapMemory.html
func UnmapMemory(device Device, memory DeviceMemory) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory)), cgoAllocsUnknown
	C.callVkUnmapMemory(cdevice, cmemory)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// FlushMappedMemoryRanges function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFlushMappedMemoryRanges.html
func FlushMappedMemoryRanges(device Device, memoryRangeCount uint32, pMemoryRanges []MappedMemoryRange) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cmemoryRangeCount, cmemoryRangeCountAllocMap := (C.uint32_t)(memoryRangeCount), cgoAllocsUnknown
	cpMemoryRanges, cpMemoryRangesAllocMap := unpackArgSMappedMemoryRange(pMemoryRanges)
	__ret := C.callVkFlushMappedMemoryRanges(cdevice, cmemoryRangeCount, cpMemoryRanges)
	packSMappedMemoryRange(pMemoryRanges, cpMemoryRanges)
	runtime.KeepAlive(cpMemoryRangesAllocMap)
	runtime.KeepAlive(cmemoryRangeCountAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// InvalidateMappedMemoryRanges function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkInvalidateMappedMemoryRanges.html
func InvalidateMappedMemoryRanges(device Device, memoryRangeCount uint32, pMemoryRanges []MappedMemoryRange) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cmemoryRangeCount, cmemoryRangeCountAllocMap := (C.uint32_t)(memoryRangeCount), cgoAllocsUnknown
	cpMemoryRanges, cpMemoryRangesAllocMap := unpackArgSMappedMemoryRange(pMemoryRanges)
	__ret := C.callVkInvalidateMappedMemoryRanges(cdevice, cmemoryRangeCount, cpMemoryRanges)
	packSMappedMemoryRange(pMemoryRanges, cpMemoryRanges)
	runtime.KeepAlive(cpMemoryRangesAllocMap)
	runtime.KeepAlive(cmemoryRangeCountAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceMemoryCommitment function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetDeviceMemoryCommitment.html
func GetDeviceMemoryCommitment(device Device, memory DeviceMemory, pCommittedMemoryInBytes *DeviceSize) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory)), cgoAllocsUnknown
	cpCommittedMemoryInBytes, cpCommittedMemoryInBytesAllocMap := (*C.VkDeviceSize)(unsafe.Pointer(pCommittedMemoryInBytes)), cgoAllocsUnknown
	C.callVkGetDeviceMemoryCommitment(cdevice, cmemory, cpCommittedMemoryInBytes)
	runtime.KeepAlive(cpCommittedMemoryInBytesAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// BindBufferMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkBindBufferMemory.html
func BindBufferMemory(device Device, buffer Buffer, memory DeviceMemory, memoryOffset DeviceSize) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory)), cgoAllocsUnknown
	cmemoryOffset, cmemoryOffsetAllocMap := (C.VkDeviceSize)(memoryOffset), cgoAllocsUnknown
	__ret := C.callVkBindBufferMemory(cdevice, cbuffer, cmemory, cmemoryOffset)
	runtime.KeepAlive(cmemoryOffsetAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// BindImageMemory function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkBindImageMemory.html
func BindImageMemory(device Device, image Image, memory DeviceMemory, memoryOffset DeviceSize) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cimage, cimageAllocMap := *(*C.VkImage)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := *(*C.VkDeviceMemory)(unsafe.Pointer(&memory)), cgoAllocsUnknown
	cmemoryOffset, cmemoryOffsetAllocMap := (C.VkDeviceSize)(memoryOffset), cgoAllocsUnknown
	__ret := C.callVkBindImageMemory(cdevice, cimage, cmemory, cmemoryOffset)
	runtime.KeepAlive(cmemoryOffsetAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetBufferMemoryRequirements function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetBufferMemoryRequirements.html
func GetBufferMemoryRequirements(device Device, buffer Buffer, pMemoryRequirements *MemoryRequirements) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	cpMemoryRequirements, cpMemoryRequirementsAllocMap := pMemoryRequirements.PassRef()
	C.callVkGetBufferMemoryRequirements(cdevice, cbuffer, cpMemoryRequirements)
	runtime.KeepAlive(cpMemoryRequirementsAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetImageMemoryRequirements function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetImageMemoryRequirements.html
func GetImageMemoryRequirements(device Device, image Image, pMemoryRequirements *MemoryRequirements) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cimage, cimageAllocMap := *(*C.VkImage)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cpMemoryRequirements, cpMemoryRequirementsAllocMap := pMemoryRequirements.PassRef()
	C.callVkGetImageMemoryRequirements(cdevice, cimage, cpMemoryRequirements)
	runtime.KeepAlive(cpMemoryRequirementsAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetImageSparseMemoryRequirements function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetImageSparseMemoryRequirements.html
func GetImageSparseMemoryRequirements(device Device, image Image, pSparseMemoryRequirementCount []uint32, pSparseMemoryRequirements []SparseImageMemoryRequirements) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cimage, cimageAllocMap := *(*C.VkImage)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cpSparseMemoryRequirementCount, cpSparseMemoryRequirementCountAllocMap := copyPUint32_tBytes((*sliceHeader)(unsafe.Pointer(&pSparseMemoryRequirementCount)))
	cpSparseMemoryRequirements, cpSparseMemoryRequirementsAllocMap := unpackArgSSparseImageMemoryRequirements(pSparseMemoryRequirements)
	C.callVkGetImageSparseMemoryRequirements(cdevice, cimage, cpSparseMemoryRequirementCount, cpSparseMemoryRequirements)
	packSSparseImageMemoryRequirements(pSparseMemoryRequirements, cpSparseMemoryRequirements)
	runtime.KeepAlive(cpSparseMemoryRequirementsAllocMap)
	runtime.KeepAlive(cpSparseMemoryRequirementCountAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetPhysicalDeviceSparseImageFormatProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPhysicalDeviceSparseImageFormatProperties.html
func GetPhysicalDeviceSparseImageFormatProperties(physicalDevice PhysicalDevice, format Format, kind ImageType, samples SampleCountFlagBits, usage ImageUsageFlags, tiling ImageTiling, pPropertyCount []uint32, pProperties []SparseImageFormatProperties) {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.VkFormat)(format), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.VkImageType)(kind), cgoAllocsUnknown
	csamples, csamplesAllocMap := (C.VkSampleCountFlagBits)(samples), cgoAllocsUnknown
	cusage, cusageAllocMap := (C.VkImageUsageFlags)(usage), cgoAllocsUnknown
	ctiling, ctilingAllocMap := (C.VkImageTiling)(tiling), cgoAllocsUnknown
	cpPropertyCount, cpPropertyCountAllocMap := copyPUint32_tBytes((*sliceHeader)(unsafe.Pointer(&pPropertyCount)))
	cpProperties, cpPropertiesAllocMap := unpackArgSSparseImageFormatProperties(pProperties)
	C.callVkGetPhysicalDeviceSparseImageFormatProperties(cphysicalDevice, cformat, ckind, csamples, cusage, ctiling, cpPropertyCount, cpProperties)
	packSSparseImageFormatProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	runtime.KeepAlive(ctilingAllocMap)
	runtime.KeepAlive(cusageAllocMap)
	runtime.KeepAlive(csamplesAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
}

// QueueBindSparse function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkQueueBindSparse.html
func QueueBindSparse(queue Queue, bindInfoCount uint32, pBindInfo []BindSparseInfo, fence Fence) Result {
	cqueue, cqueueAllocMap := *(*C.VkQueue)(unsafe.Pointer(&queue)), cgoAllocsUnknown
	cbindInfoCount, cbindInfoCountAllocMap := (C.uint32_t)(bindInfoCount), cgoAllocsUnknown
	cpBindInfo, cpBindInfoAllocMap := unpackArgSBindSparseInfo(pBindInfo)
	cfence, cfenceAllocMap := *(*C.VkFence)(unsafe.Pointer(&fence)), cgoAllocsUnknown
	__ret := C.callVkQueueBindSparse(cqueue, cbindInfoCount, cpBindInfo, cfence)
	runtime.KeepAlive(cfenceAllocMap)
	packSBindSparseInfo(pBindInfo, cpBindInfo)
	runtime.KeepAlive(cpBindInfoAllocMap)
	runtime.KeepAlive(cbindInfoCountAllocMap)
	runtime.KeepAlive(cqueueAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateFence function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateFence.html
func CreateFence(device Device, pCreateInfo *FenceCreateInfo, pAllocator *AllocationCallbacks, pFence *Fence) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpFence, cpFenceAllocMap := (*C.VkFence)(unsafe.Pointer(pFence)), cgoAllocsUnknown
	__ret := C.callVkCreateFence(cdevice, cpCreateInfo, cpAllocator, cpFence)
	runtime.KeepAlive(cpFenceAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyFence function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyFence.html
func DestroyFence(device Device, fence Fence, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cfence, cfenceAllocMap := *(*C.VkFence)(unsafe.Pointer(&fence)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyFence(cdevice, cfence, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cfenceAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// ResetFences function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetFences.html
func ResetFences(device Device, fenceCount uint32, pFences []Fence) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cfenceCount, cfenceCountAllocMap := (C.uint32_t)(fenceCount), cgoAllocsUnknown
	cpFences, cpFencesAllocMap := copyPFenceBytes((*sliceHeader)(unsafe.Pointer(&pFences)))
	__ret := C.callVkResetFences(cdevice, cfenceCount, cpFences)
	runtime.KeepAlive(cpFencesAllocMap)
	runtime.KeepAlive(cfenceCountAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetFenceStatus function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetFenceStatus.html
func GetFenceStatus(device Device, fence Fence) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cfence, cfenceAllocMap := *(*C.VkFence)(unsafe.Pointer(&fence)), cgoAllocsUnknown
	__ret := C.callVkGetFenceStatus(cdevice, cfence)
	runtime.KeepAlive(cfenceAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// WaitForFences function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkWaitForFences.html
func WaitForFences(device Device, fenceCount uint32, pFences []Fence, waitAll Bool32, timeout uint32) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cfenceCount, cfenceCountAllocMap := (C.uint32_t)(fenceCount), cgoAllocsUnknown
	cpFences, cpFencesAllocMap := copyPFenceBytes((*sliceHeader)(unsafe.Pointer(&pFences)))
	cwaitAll, cwaitAllAllocMap := (C.VkBool32)(waitAll), cgoAllocsUnknown
	ctimeout, ctimeoutAllocMap := (C.uint64_t)(timeout), cgoAllocsUnknown
	__ret := C.callVkWaitForFences(cdevice, cfenceCount, cpFences, cwaitAll, ctimeout)
	runtime.KeepAlive(ctimeoutAllocMap)
	runtime.KeepAlive(cwaitAllAllocMap)
	runtime.KeepAlive(cpFencesAllocMap)
	runtime.KeepAlive(cfenceCountAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateSemaphore function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateSemaphore.html
func CreateSemaphore(device Device, pCreateInfo *SemaphoreCreateInfo, pAllocator *AllocationCallbacks, pSemaphore *Semaphore) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpSemaphore, cpSemaphoreAllocMap := (*C.VkSemaphore)(unsafe.Pointer(pSemaphore)), cgoAllocsUnknown
	__ret := C.callVkCreateSemaphore(cdevice, cpCreateInfo, cpAllocator, cpSemaphore)
	runtime.KeepAlive(cpSemaphoreAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroySemaphore function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroySemaphore.html
func DestroySemaphore(device Device, semaphore Semaphore, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	csemaphore, csemaphoreAllocMap := *(*C.VkSemaphore)(unsafe.Pointer(&semaphore)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroySemaphore(cdevice, csemaphore, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(csemaphoreAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateEvent.html
func CreateEvent(device Device, pCreateInfo *EventCreateInfo, pAllocator *AllocationCallbacks, pEvent *Event) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpEvent, cpEventAllocMap := (*C.VkEvent)(unsafe.Pointer(pEvent)), cgoAllocsUnknown
	__ret := C.callVkCreateEvent(cdevice, cpCreateInfo, cpAllocator, cpEvent)
	runtime.KeepAlive(cpEventAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyEvent.html
func DestroyEvent(device Device, event Event, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cevent, ceventAllocMap := *(*C.VkEvent)(unsafe.Pointer(&event)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyEvent(cdevice, cevent, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetEventStatus function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetEventStatus.html
func GetEventStatus(device Device, event Event) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cevent, ceventAllocMap := *(*C.VkEvent)(unsafe.Pointer(&event)), cgoAllocsUnknown
	__ret := C.callVkGetEventStatus(cdevice, cevent)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// SetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkSetEvent.html
func SetEvent(device Device, event Event) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cevent, ceventAllocMap := *(*C.VkEvent)(unsafe.Pointer(&event)), cgoAllocsUnknown
	__ret := C.callVkSetEvent(cdevice, cevent)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// ResetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetEvent.html
func ResetEvent(device Device, event Event) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cevent, ceventAllocMap := *(*C.VkEvent)(unsafe.Pointer(&event)), cgoAllocsUnknown
	__ret := C.callVkResetEvent(cdevice, cevent)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateQueryPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateQueryPool.html
func CreateQueryPool(device Device, pCreateInfo *QueryPoolCreateInfo, pAllocator *AllocationCallbacks, pQueryPool *QueryPool) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpQueryPool, cpQueryPoolAllocMap := (*C.VkQueryPool)(unsafe.Pointer(pQueryPool)), cgoAllocsUnknown
	__ret := C.callVkCreateQueryPool(cdevice, cpCreateInfo, cpAllocator, cpQueryPool)
	runtime.KeepAlive(cpQueryPoolAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyQueryPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyQueryPool.html
func DestroyQueryPool(device Device, queryPool QueryPool, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cqueryPool, cqueryPoolAllocMap := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyQueryPool(cdevice, cqueryPool, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cqueryPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetQueryPoolResults function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetQueryPoolResults.html
func GetQueryPoolResults(device Device, queryPool QueryPool, firstQuery uint32, queryCount uint32, dataSize uint32, pData unsafe.Pointer, stride DeviceSize, flags QueryResultFlags) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cqueryPool, cqueryPoolAllocMap := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool)), cgoAllocsUnknown
	cfirstQuery, cfirstQueryAllocMap := (C.uint32_t)(firstQuery), cgoAllocsUnknown
	cqueryCount, cqueryCountAllocMap := (C.uint32_t)(queryCount), cgoAllocsUnknown
	cdataSize, cdataSizeAllocMap := (C.size_t)(dataSize), cgoAllocsUnknown
	cpData, cpDataAllocMap := pData, cgoAllocsUnknown
	cstride, cstrideAllocMap := (C.VkDeviceSize)(stride), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkQueryResultFlags)(flags), cgoAllocsUnknown
	__ret := C.callVkGetQueryPoolResults(cdevice, cqueryPool, cfirstQuery, cqueryCount, cdataSize, cpData, cstride, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cstrideAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cdataSizeAllocMap)
	runtime.KeepAlive(cqueryCountAllocMap)
	runtime.KeepAlive(cfirstQueryAllocMap)
	runtime.KeepAlive(cqueryPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateBuffer.html
func CreateBuffer(device Device, pCreateInfo *BufferCreateInfo, pAllocator *AllocationCallbacks, pBuffer *Buffer) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpBuffer, cpBufferAllocMap := (*C.VkBuffer)(unsafe.Pointer(pBuffer)), cgoAllocsUnknown
	__ret := C.callVkCreateBuffer(cdevice, cpCreateInfo, cpAllocator, cpBuffer)
	runtime.KeepAlive(cpBufferAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyBuffer.html
func DestroyBuffer(device Device, buffer Buffer, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyBuffer(cdevice, cbuffer, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateBufferView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateBufferView.html
func CreateBufferView(device Device, pCreateInfo *BufferViewCreateInfo, pAllocator *AllocationCallbacks, pView *BufferView) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpView, cpViewAllocMap := (*C.VkBufferView)(unsafe.Pointer(pView)), cgoAllocsUnknown
	__ret := C.callVkCreateBufferView(cdevice, cpCreateInfo, cpAllocator, cpView)
	runtime.KeepAlive(cpViewAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyBufferView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyBufferView.html
func DestroyBufferView(device Device, bufferView BufferView, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cbufferView, cbufferViewAllocMap := *(*C.VkBufferView)(unsafe.Pointer(&bufferView)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyBufferView(cdevice, cbufferView, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cbufferViewAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateImage.html
func CreateImage(device Device, pCreateInfo *ImageCreateInfo, pAllocator *AllocationCallbacks, pImage *Image) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpImage, cpImageAllocMap := (*C.VkImage)(unsafe.Pointer(pImage)), cgoAllocsUnknown
	__ret := C.callVkCreateImage(cdevice, cpCreateInfo, cpAllocator, cpImage)
	runtime.KeepAlive(cpImageAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyImage.html
func DestroyImage(device Device, image Image, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cimage, cimageAllocMap := *(*C.VkImage)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyImage(cdevice, cimage, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetImageSubresourceLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetImageSubresourceLayout.html
func GetImageSubresourceLayout(device Device, image Image, pSubresource *ImageSubresource, pLayout *SubresourceLayout) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cimage, cimageAllocMap := *(*C.VkImage)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cpSubresource, cpSubresourceAllocMap := pSubresource.PassRef()
	cpLayout, cpLayoutAllocMap := pLayout.PassRef()
	C.callVkGetImageSubresourceLayout(cdevice, cimage, cpSubresource, cpLayout)
	runtime.KeepAlive(cpLayoutAllocMap)
	runtime.KeepAlive(cpSubresourceAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateImageView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateImageView.html
func CreateImageView(device Device, pCreateInfo *ImageViewCreateInfo, pAllocator *AllocationCallbacks, pView *ImageView) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpView, cpViewAllocMap := (*C.VkImageView)(unsafe.Pointer(pView)), cgoAllocsUnknown
	__ret := C.callVkCreateImageView(cdevice, cpCreateInfo, cpAllocator, cpView)
	runtime.KeepAlive(cpViewAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyImageView function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyImageView.html
func DestroyImageView(device Device, imageView ImageView, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cimageView, cimageViewAllocMap := *(*C.VkImageView)(unsafe.Pointer(&imageView)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyImageView(cdevice, cimageView, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cimageViewAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateShaderModule function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateShaderModule.html
func CreateShaderModule(device Device, pCreateInfo *ShaderModuleCreateInfo, pAllocator *AllocationCallbacks, pShaderModule *ShaderModule) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpShaderModule, cpShaderModuleAllocMap := (*C.VkShaderModule)(unsafe.Pointer(pShaderModule)), cgoAllocsUnknown
	__ret := C.callVkCreateShaderModule(cdevice, cpCreateInfo, cpAllocator, cpShaderModule)
	runtime.KeepAlive(cpShaderModuleAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyShaderModule function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyShaderModule.html
func DestroyShaderModule(device Device, shaderModule ShaderModule, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cshaderModule, cshaderModuleAllocMap := *(*C.VkShaderModule)(unsafe.Pointer(&shaderModule)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyShaderModule(cdevice, cshaderModule, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cshaderModuleAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreatePipelineCache function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreatePipelineCache.html
func CreatePipelineCache(device Device, pCreateInfo *PipelineCacheCreateInfo, pAllocator *AllocationCallbacks, pPipelineCache *PipelineCache) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpPipelineCache, cpPipelineCacheAllocMap := (*C.VkPipelineCache)(unsafe.Pointer(pPipelineCache)), cgoAllocsUnknown
	__ret := C.callVkCreatePipelineCache(cdevice, cpCreateInfo, cpAllocator, cpPipelineCache)
	runtime.KeepAlive(cpPipelineCacheAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineCache function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyPipelineCache.html
func DestroyPipelineCache(device Device, pipelineCache PipelineCache, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpipelineCache, cpipelineCacheAllocMap := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyPipelineCache(cdevice, cpipelineCache, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpipelineCacheAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetPipelineCacheData function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPipelineCacheData.html
func GetPipelineCacheData(device Device, pipelineCache PipelineCache, pDataSize *uint32, pData unsafe.Pointer) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpipelineCache, cpipelineCacheAllocMap := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache)), cgoAllocsUnknown
	cpDataSize, cpDataSizeAllocMap := (*C.size_t)(unsafe.Pointer(pDataSize)), cgoAllocsUnknown
	cpData, cpDataAllocMap := pData, cgoAllocsUnknown
	__ret := C.callVkGetPipelineCacheData(cdevice, cpipelineCache, cpDataSize, cpData)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cpDataSizeAllocMap)
	runtime.KeepAlive(cpipelineCacheAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// MergePipelineCaches function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkMergePipelineCaches.html
func MergePipelineCaches(device Device, dstCache PipelineCache, srcCacheCount uint32, pSrcCaches []PipelineCache) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cdstCache, cdstCacheAllocMap := *(*C.VkPipelineCache)(unsafe.Pointer(&dstCache)), cgoAllocsUnknown
	csrcCacheCount, csrcCacheCountAllocMap := (C.uint32_t)(srcCacheCount), cgoAllocsUnknown
	cpSrcCaches, cpSrcCachesAllocMap := copyPPipelineCacheBytes((*sliceHeader)(unsafe.Pointer(&pSrcCaches)))
	__ret := C.callVkMergePipelineCaches(cdevice, cdstCache, csrcCacheCount, cpSrcCaches)
	runtime.KeepAlive(cpSrcCachesAllocMap)
	runtime.KeepAlive(csrcCacheCountAllocMap)
	runtime.KeepAlive(cdstCacheAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateGraphicsPipelines function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateGraphicsPipelines.html
func CreateGraphicsPipelines(device Device, pipelineCache PipelineCache, createInfoCount uint32, pCreateInfos []GraphicsPipelineCreateInfo, pAllocator *AllocationCallbacks, pPipelines []Pipeline) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpipelineCache, cpipelineCacheAllocMap := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache)), cgoAllocsUnknown
	ccreateInfoCount, ccreateInfoCountAllocMap := (C.uint32_t)(createInfoCount), cgoAllocsUnknown
	cpCreateInfos, cpCreateInfosAllocMap := unpackArgSGraphicsPipelineCreateInfo(pCreateInfos)
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpPipelines, cpPipelinesAllocMap := copyPPipelineBytes((*sliceHeader)(unsafe.Pointer(&pPipelines)))
	__ret := C.callVkCreateGraphicsPipelines(cdevice, cpipelineCache, ccreateInfoCount, cpCreateInfos, cpAllocator, cpPipelines)
	runtime.KeepAlive(cpPipelinesAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	packSGraphicsPipelineCreateInfo(pCreateInfos, cpCreateInfos)
	runtime.KeepAlive(cpCreateInfosAllocMap)
	runtime.KeepAlive(ccreateInfoCountAllocMap)
	runtime.KeepAlive(cpipelineCacheAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateComputePipelines function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateComputePipelines.html
func CreateComputePipelines(device Device, pipelineCache PipelineCache, createInfoCount uint32, pCreateInfos []ComputePipelineCreateInfo, pAllocator *AllocationCallbacks, pPipelines []Pipeline) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpipelineCache, cpipelineCacheAllocMap := *(*C.VkPipelineCache)(unsafe.Pointer(&pipelineCache)), cgoAllocsUnknown
	ccreateInfoCount, ccreateInfoCountAllocMap := (C.uint32_t)(createInfoCount), cgoAllocsUnknown
	cpCreateInfos, cpCreateInfosAllocMap := unpackArgSComputePipelineCreateInfo(pCreateInfos)
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpPipelines, cpPipelinesAllocMap := copyPPipelineBytes((*sliceHeader)(unsafe.Pointer(&pPipelines)))
	__ret := C.callVkCreateComputePipelines(cdevice, cpipelineCache, ccreateInfoCount, cpCreateInfos, cpAllocator, cpPipelines)
	runtime.KeepAlive(cpPipelinesAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	packSComputePipelineCreateInfo(pCreateInfos, cpCreateInfos)
	runtime.KeepAlive(cpCreateInfosAllocMap)
	runtime.KeepAlive(ccreateInfoCountAllocMap)
	runtime.KeepAlive(cpipelineCacheAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipeline function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyPipeline.html
func DestroyPipeline(device Device, pipeline Pipeline, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpipeline, cpipelineAllocMap := *(*C.VkPipeline)(unsafe.Pointer(&pipeline)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyPipeline(cdevice, cpipeline, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpipelineAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreatePipelineLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreatePipelineLayout.html
func CreatePipelineLayout(device Device, pCreateInfo *PipelineLayoutCreateInfo, pAllocator *AllocationCallbacks, pPipelineLayout *PipelineLayout) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpPipelineLayout, cpPipelineLayoutAllocMap := (*C.VkPipelineLayout)(unsafe.Pointer(pPipelineLayout)), cgoAllocsUnknown
	__ret := C.callVkCreatePipelineLayout(cdevice, cpCreateInfo, cpAllocator, cpPipelineLayout)
	runtime.KeepAlive(cpPipelineLayoutAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyPipelineLayout.html
func DestroyPipelineLayout(device Device, pipelineLayout PipelineLayout, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpipelineLayout, cpipelineLayoutAllocMap := *(*C.VkPipelineLayout)(unsafe.Pointer(&pipelineLayout)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyPipelineLayout(cdevice, cpipelineLayout, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpipelineLayoutAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateSampler function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateSampler.html
func CreateSampler(device Device, pCreateInfo *SamplerCreateInfo, pAllocator *AllocationCallbacks, pSampler *Sampler) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpSampler, cpSamplerAllocMap := (*C.VkSampler)(unsafe.Pointer(pSampler)), cgoAllocsUnknown
	__ret := C.callVkCreateSampler(cdevice, cpCreateInfo, cpAllocator, cpSampler)
	runtime.KeepAlive(cpSamplerAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroySampler function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroySampler.html
func DestroySampler(device Device, sampler Sampler, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	csampler, csamplerAllocMap := *(*C.VkSampler)(unsafe.Pointer(&sampler)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroySampler(cdevice, csampler, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(csamplerAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateDescriptorSetLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDescriptorSetLayout.html
func CreateDescriptorSetLayout(device Device, pCreateInfo *DescriptorSetLayoutCreateInfo, pAllocator *AllocationCallbacks, pSetLayout *DescriptorSetLayout) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpSetLayout, cpSetLayoutAllocMap := (*C.VkDescriptorSetLayout)(unsafe.Pointer(pSetLayout)), cgoAllocsUnknown
	__ret := C.callVkCreateDescriptorSetLayout(cdevice, cpCreateInfo, cpAllocator, cpSetLayout)
	runtime.KeepAlive(cpSetLayoutAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorSetLayout function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDescriptorSetLayout.html
func DestroyDescriptorSetLayout(device Device, descriptorSetLayout DescriptorSetLayout, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cdescriptorSetLayout, cdescriptorSetLayoutAllocMap := *(*C.VkDescriptorSetLayout)(unsafe.Pointer(&descriptorSetLayout)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyDescriptorSetLayout(cdevice, cdescriptorSetLayout, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cdescriptorSetLayoutAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateDescriptorPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDescriptorPool.html
func CreateDescriptorPool(device Device, pCreateInfo *DescriptorPoolCreateInfo, pAllocator *AllocationCallbacks, pDescriptorPool *DescriptorPool) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpDescriptorPool, cpDescriptorPoolAllocMap := (*C.VkDescriptorPool)(unsafe.Pointer(pDescriptorPool)), cgoAllocsUnknown
	__ret := C.callVkCreateDescriptorPool(cdevice, cpCreateInfo, cpAllocator, cpDescriptorPool)
	runtime.KeepAlive(cpDescriptorPoolAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDescriptorPool.html
func DestroyDescriptorPool(device Device, descriptorPool DescriptorPool, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cdescriptorPool, cdescriptorPoolAllocMap := *(*C.VkDescriptorPool)(unsafe.Pointer(&descriptorPool)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyDescriptorPool(cdevice, cdescriptorPool, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cdescriptorPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// ResetDescriptorPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetDescriptorPool.html
func ResetDescriptorPool(device Device, descriptorPool DescriptorPool, flags DescriptorPoolResetFlags) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cdescriptorPool, cdescriptorPoolAllocMap := *(*C.VkDescriptorPool)(unsafe.Pointer(&descriptorPool)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkDescriptorPoolResetFlags)(flags), cgoAllocsUnknown
	__ret := C.callVkResetDescriptorPool(cdevice, cdescriptorPool, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cdescriptorPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// AllocateDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkAllocateDescriptorSets.html
func AllocateDescriptorSets(device Device, pAllocateInfo *DescriptorSetAllocateInfo, pDescriptorSets *DescriptorSet) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpAllocateInfo, cpAllocateInfoAllocMap := pAllocateInfo.PassRef()
	cpDescriptorSets, cpDescriptorSetsAllocMap := (*C.VkDescriptorSet)(unsafe.Pointer(pDescriptorSets)), cgoAllocsUnknown
	__ret := C.callVkAllocateDescriptorSets(cdevice, cpAllocateInfo, cpDescriptorSets)
	runtime.KeepAlive(cpDescriptorSetsAllocMap)
	runtime.KeepAlive(cpAllocateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// FreeDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFreeDescriptorSets.html
func FreeDescriptorSets(device Device, descriptorPool DescriptorPool, descriptorSetCount uint32, pDescriptorSets *DescriptorSet) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cdescriptorPool, cdescriptorPoolAllocMap := *(*C.VkDescriptorPool)(unsafe.Pointer(&descriptorPool)), cgoAllocsUnknown
	cdescriptorSetCount, cdescriptorSetCountAllocMap := (C.uint32_t)(descriptorSetCount), cgoAllocsUnknown
	cpDescriptorSets, cpDescriptorSetsAllocMap := (*C.VkDescriptorSet)(unsafe.Pointer(pDescriptorSets)), cgoAllocsUnknown
	__ret := C.callVkFreeDescriptorSets(cdevice, cdescriptorPool, cdescriptorSetCount, cpDescriptorSets)
	runtime.KeepAlive(cpDescriptorSetsAllocMap)
	runtime.KeepAlive(cdescriptorSetCountAllocMap)
	runtime.KeepAlive(cdescriptorPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// UpdateDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkUpdateDescriptorSets.html
func UpdateDescriptorSets(device Device, descriptorWriteCount uint32, pDescriptorWrites []WriteDescriptorSet, descriptorCopyCount uint32, pDescriptorCopies []CopyDescriptorSet) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cdescriptorWriteCount, cdescriptorWriteCountAllocMap := (C.uint32_t)(descriptorWriteCount), cgoAllocsUnknown
	cpDescriptorWrites, cpDescriptorWritesAllocMap := unpackArgSWriteDescriptorSet(pDescriptorWrites)
	cdescriptorCopyCount, cdescriptorCopyCountAllocMap := (C.uint32_t)(descriptorCopyCount), cgoAllocsUnknown
	cpDescriptorCopies, cpDescriptorCopiesAllocMap := unpackArgSCopyDescriptorSet(pDescriptorCopies)
	C.callVkUpdateDescriptorSets(cdevice, cdescriptorWriteCount, cpDescriptorWrites, cdescriptorCopyCount, cpDescriptorCopies)
	packSCopyDescriptorSet(pDescriptorCopies, cpDescriptorCopies)
	runtime.KeepAlive(cpDescriptorCopiesAllocMap)
	runtime.KeepAlive(cdescriptorCopyCountAllocMap)
	packSWriteDescriptorSet(pDescriptorWrites, cpDescriptorWrites)
	runtime.KeepAlive(cpDescriptorWritesAllocMap)
	runtime.KeepAlive(cdescriptorWriteCountAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateFramebuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateFramebuffer.html
func CreateFramebuffer(device Device, pCreateInfo *FramebufferCreateInfo, pAllocator *AllocationCallbacks, pFramebuffer *Framebuffer) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpFramebuffer, cpFramebufferAllocMap := (*C.VkFramebuffer)(unsafe.Pointer(pFramebuffer)), cgoAllocsUnknown
	__ret := C.callVkCreateFramebuffer(cdevice, cpCreateInfo, cpAllocator, cpFramebuffer)
	runtime.KeepAlive(cpFramebufferAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyFramebuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyFramebuffer.html
func DestroyFramebuffer(device Device, framebuffer Framebuffer, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cframebuffer, cframebufferAllocMap := *(*C.VkFramebuffer)(unsafe.Pointer(&framebuffer)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyFramebuffer(cdevice, cframebuffer, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cframebufferAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateRenderPass.html
func CreateRenderPass(device Device, pCreateInfo *RenderPassCreateInfo, pAllocator *AllocationCallbacks, pRenderPass *RenderPass) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpRenderPass, cpRenderPassAllocMap := (*C.VkRenderPass)(unsafe.Pointer(pRenderPass)), cgoAllocsUnknown
	__ret := C.callVkCreateRenderPass(cdevice, cpCreateInfo, cpAllocator, cpRenderPass)
	runtime.KeepAlive(cpRenderPassAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyRenderPass.html
func DestroyRenderPass(device Device, renderPass RenderPass, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	crenderPass, crenderPassAllocMap := *(*C.VkRenderPass)(unsafe.Pointer(&renderPass)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyRenderPass(cdevice, crenderPass, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(crenderPassAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetRenderAreaGranularity function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetRenderAreaGranularity.html
func GetRenderAreaGranularity(device Device, renderPass RenderPass, pGranularity *Extent2D) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	crenderPass, crenderPassAllocMap := *(*C.VkRenderPass)(unsafe.Pointer(&renderPass)), cgoAllocsUnknown
	cpGranularity, cpGranularityAllocMap := pGranularity.PassRef()
	C.callVkGetRenderAreaGranularity(cdevice, crenderPass, cpGranularity)
	runtime.KeepAlive(cpGranularityAllocMap)
	runtime.KeepAlive(crenderPassAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// CreateCommandPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateCommandPool.html
func CreateCommandPool(device Device, pCreateInfo *CommandPoolCreateInfo, pAllocator *AllocationCallbacks, pCommandPool *CommandPool) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpCommandPool, cpCommandPoolAllocMap := (*C.VkCommandPool)(unsafe.Pointer(pCommandPool)), cgoAllocsUnknown
	__ret := C.callVkCreateCommandPool(cdevice, cpCreateInfo, cpAllocator, cpCommandPool)
	runtime.KeepAlive(cpCommandPoolAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyCommandPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyCommandPool.html
func DestroyCommandPool(device Device, commandPool CommandPool, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	ccommandPool, ccommandPoolAllocMap := *(*C.VkCommandPool)(unsafe.Pointer(&commandPool)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyCommandPool(cdevice, ccommandPool, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(ccommandPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// ResetCommandPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetCommandPool.html
func ResetCommandPool(device Device, commandPool CommandPool, flags CommandPoolResetFlags) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	ccommandPool, ccommandPoolAllocMap := *(*C.VkCommandPool)(unsafe.Pointer(&commandPool)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkCommandPoolResetFlags)(flags), cgoAllocsUnknown
	__ret := C.callVkResetCommandPool(cdevice, ccommandPool, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(ccommandPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// AllocateCommandBuffers function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkAllocateCommandBuffers.html
func AllocateCommandBuffers(device Device, pAllocateInfo *CommandBufferAllocateInfo, pCommandBuffers []CommandBuffer) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpAllocateInfo, cpAllocateInfoAllocMap := pAllocateInfo.PassRef()
	cpCommandBuffers, cpCommandBuffersAllocMap := copyPCommandBufferBytes((*sliceHeader)(unsafe.Pointer(&pCommandBuffers)))
	__ret := C.callVkAllocateCommandBuffers(cdevice, cpAllocateInfo, cpCommandBuffers)
	runtime.KeepAlive(cpCommandBuffersAllocMap)
	runtime.KeepAlive(cpAllocateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// FreeCommandBuffers function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkFreeCommandBuffers.html
func FreeCommandBuffers(device Device, commandPool CommandPool, commandBufferCount uint32, pCommandBuffers []CommandBuffer) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	ccommandPool, ccommandPoolAllocMap := *(*C.VkCommandPool)(unsafe.Pointer(&commandPool)), cgoAllocsUnknown
	ccommandBufferCount, ccommandBufferCountAllocMap := (C.uint32_t)(commandBufferCount), cgoAllocsUnknown
	cpCommandBuffers, cpCommandBuffersAllocMap := copyPCommandBufferBytes((*sliceHeader)(unsafe.Pointer(&pCommandBuffers)))
	C.callVkFreeCommandBuffers(cdevice, ccommandPool, ccommandBufferCount, cpCommandBuffers)
	runtime.KeepAlive(cpCommandBuffersAllocMap)
	runtime.KeepAlive(ccommandBufferCountAllocMap)
	runtime.KeepAlive(ccommandPoolAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// BeginCommandBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkBeginCommandBuffer.html
func BeginCommandBuffer(commandBuffer CommandBuffer, pBeginInfo *CommandBufferBeginInfo) Result {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cpBeginInfo, cpBeginInfoAllocMap := pBeginInfo.PassRef()
	__ret := C.callVkBeginCommandBuffer(ccommandBuffer, cpBeginInfo)
	runtime.KeepAlive(cpBeginInfoAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
	__v := (Result)(__ret)
	return __v
}

// EndCommandBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkEndCommandBuffer.html
func EndCommandBuffer(commandBuffer CommandBuffer) Result {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	__ret := C.callVkEndCommandBuffer(ccommandBuffer)
	runtime.KeepAlive(ccommandBufferAllocMap)
	__v := (Result)(__ret)
	return __v
}

// ResetCommandBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkResetCommandBuffer.html
func ResetCommandBuffer(commandBuffer CommandBuffer, flags CommandBufferResetFlags) Result {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkCommandBufferResetFlags)(flags), cgoAllocsUnknown
	__ret := C.callVkResetCommandBuffer(ccommandBuffer, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CmdBindPipeline function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindPipeline.html
func CmdBindPipeline(commandBuffer CommandBuffer, pipelineBindPoint PipelineBindPoint, pipeline Pipeline) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cpipelineBindPoint, cpipelineBindPointAllocMap := (C.VkPipelineBindPoint)(pipelineBindPoint), cgoAllocsUnknown
	cpipeline, cpipelineAllocMap := *(*C.VkPipeline)(unsafe.Pointer(&pipeline)), cgoAllocsUnknown
	C.callVkCmdBindPipeline(ccommandBuffer, cpipelineBindPoint, cpipeline)
	runtime.KeepAlive(cpipelineAllocMap)
	runtime.KeepAlive(cpipelineBindPointAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetViewport function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetViewport.html
func CmdSetViewport(commandBuffer CommandBuffer, firstViewport uint32, viewportCount uint32, pViewports []Viewport) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cfirstViewport, cfirstViewportAllocMap := (C.uint32_t)(firstViewport), cgoAllocsUnknown
	cviewportCount, cviewportCountAllocMap := (C.uint32_t)(viewportCount), cgoAllocsUnknown
	cpViewports, cpViewportsAllocMap := unpackArgSViewport(pViewports)
	C.callVkCmdSetViewport(ccommandBuffer, cfirstViewport, cviewportCount, cpViewports)
	packSViewport(pViewports, cpViewports)
	runtime.KeepAlive(cpViewportsAllocMap)
	runtime.KeepAlive(cviewportCountAllocMap)
	runtime.KeepAlive(cfirstViewportAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetScissor function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetScissor.html
func CmdSetScissor(commandBuffer CommandBuffer, firstScissor uint32, scissorCount uint32, pScissors []Rect2D) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cfirstScissor, cfirstScissorAllocMap := (C.uint32_t)(firstScissor), cgoAllocsUnknown
	cscissorCount, cscissorCountAllocMap := (C.uint32_t)(scissorCount), cgoAllocsUnknown
	cpScissors, cpScissorsAllocMap := unpackArgSRect2D(pScissors)
	C.callVkCmdSetScissor(ccommandBuffer, cfirstScissor, cscissorCount, cpScissors)
	packSRect2D(pScissors, cpScissors)
	runtime.KeepAlive(cpScissorsAllocMap)
	runtime.KeepAlive(cscissorCountAllocMap)
	runtime.KeepAlive(cfirstScissorAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetLineWidth function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetLineWidth.html
func CmdSetLineWidth(commandBuffer CommandBuffer, lineWidth float32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	clineWidth, clineWidthAllocMap := (C.float)(lineWidth), cgoAllocsUnknown
	C.callVkCmdSetLineWidth(ccommandBuffer, clineWidth)
	runtime.KeepAlive(clineWidthAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetDepthBias function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetDepthBias.html
func CmdSetDepthBias(commandBuffer CommandBuffer, depthBiasConstantFactor float32, depthBiasClamp float32, depthBiasSlopeFactor float32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cdepthBiasConstantFactor, cdepthBiasConstantFactorAllocMap := (C.float)(depthBiasConstantFactor), cgoAllocsUnknown
	cdepthBiasClamp, cdepthBiasClampAllocMap := (C.float)(depthBiasClamp), cgoAllocsUnknown
	cdepthBiasSlopeFactor, cdepthBiasSlopeFactorAllocMap := (C.float)(depthBiasSlopeFactor), cgoAllocsUnknown
	C.callVkCmdSetDepthBias(ccommandBuffer, cdepthBiasConstantFactor, cdepthBiasClamp, cdepthBiasSlopeFactor)
	runtime.KeepAlive(cdepthBiasSlopeFactorAllocMap)
	runtime.KeepAlive(cdepthBiasClampAllocMap)
	runtime.KeepAlive(cdepthBiasConstantFactorAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetBlendConstants function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetBlendConstants.html
func CmdSetBlendConstants(commandBuffer CommandBuffer, blendConstants *[4]float32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cblendConstants, cblendConstantsAllocMap := *(**C.float)(unsafe.Pointer(&blendConstants)), cgoAllocsUnknown
	C.callVkCmdSetBlendConstants(ccommandBuffer, cblendConstants)
	runtime.KeepAlive(cblendConstantsAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetDepthBounds function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetDepthBounds.html
func CmdSetDepthBounds(commandBuffer CommandBuffer, minDepthBounds float32, maxDepthBounds float32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cminDepthBounds, cminDepthBoundsAllocMap := (C.float)(minDepthBounds), cgoAllocsUnknown
	cmaxDepthBounds, cmaxDepthBoundsAllocMap := (C.float)(maxDepthBounds), cgoAllocsUnknown
	C.callVkCmdSetDepthBounds(ccommandBuffer, cminDepthBounds, cmaxDepthBounds)
	runtime.KeepAlive(cmaxDepthBoundsAllocMap)
	runtime.KeepAlive(cminDepthBoundsAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetStencilCompareMask function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetStencilCompareMask.html
func CmdSetStencilCompareMask(commandBuffer CommandBuffer, faceMask StencilFaceFlags, compareMask uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cfaceMask, cfaceMaskAllocMap := (C.VkStencilFaceFlags)(faceMask), cgoAllocsUnknown
	ccompareMask, ccompareMaskAllocMap := (C.uint32_t)(compareMask), cgoAllocsUnknown
	C.callVkCmdSetStencilCompareMask(ccommandBuffer, cfaceMask, ccompareMask)
	runtime.KeepAlive(ccompareMaskAllocMap)
	runtime.KeepAlive(cfaceMaskAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetStencilWriteMask function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetStencilWriteMask.html
func CmdSetStencilWriteMask(commandBuffer CommandBuffer, faceMask StencilFaceFlags, writeMask uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cfaceMask, cfaceMaskAllocMap := (C.VkStencilFaceFlags)(faceMask), cgoAllocsUnknown
	cwriteMask, cwriteMaskAllocMap := (C.uint32_t)(writeMask), cgoAllocsUnknown
	C.callVkCmdSetStencilWriteMask(ccommandBuffer, cfaceMask, cwriteMask)
	runtime.KeepAlive(cwriteMaskAllocMap)
	runtime.KeepAlive(cfaceMaskAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetStencilReference function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetStencilReference.html
func CmdSetStencilReference(commandBuffer CommandBuffer, faceMask StencilFaceFlags, reference uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cfaceMask, cfaceMaskAllocMap := (C.VkStencilFaceFlags)(faceMask), cgoAllocsUnknown
	creference, creferenceAllocMap := (C.uint32_t)(reference), cgoAllocsUnknown
	C.callVkCmdSetStencilReference(ccommandBuffer, cfaceMask, creference)
	runtime.KeepAlive(creferenceAllocMap)
	runtime.KeepAlive(cfaceMaskAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdBindDescriptorSets function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindDescriptorSets.html
func CmdBindDescriptorSets(commandBuffer CommandBuffer, pipelineBindPoint PipelineBindPoint, layout PipelineLayout, firstSet uint32, descriptorSetCount uint32, pDescriptorSets []DescriptorSet, dynamicOffsetCount uint32, pDynamicOffsets []uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cpipelineBindPoint, cpipelineBindPointAllocMap := (C.VkPipelineBindPoint)(pipelineBindPoint), cgoAllocsUnknown
	clayout, clayoutAllocMap := *(*C.VkPipelineLayout)(unsafe.Pointer(&layout)), cgoAllocsUnknown
	cfirstSet, cfirstSetAllocMap := (C.uint32_t)(firstSet), cgoAllocsUnknown
	cdescriptorSetCount, cdescriptorSetCountAllocMap := (C.uint32_t)(descriptorSetCount), cgoAllocsUnknown
	cpDescriptorSets, cpDescriptorSetsAllocMap := copyPDescriptorSetBytes((*sliceHeader)(unsafe.Pointer(&pDescriptorSets)))
	cdynamicOffsetCount, cdynamicOffsetCountAllocMap := (C.uint32_t)(dynamicOffsetCount), cgoAllocsUnknown
	cpDynamicOffsets, cpDynamicOffsetsAllocMap := copyPUint32_tBytes((*sliceHeader)(unsafe.Pointer(&pDynamicOffsets)))
	C.callVkCmdBindDescriptorSets(ccommandBuffer, cpipelineBindPoint, clayout, cfirstSet, cdescriptorSetCount, cpDescriptorSets, cdynamicOffsetCount, cpDynamicOffsets)
	runtime.KeepAlive(cpDynamicOffsetsAllocMap)
	runtime.KeepAlive(cdynamicOffsetCountAllocMap)
	runtime.KeepAlive(cpDescriptorSetsAllocMap)
	runtime.KeepAlive(cdescriptorSetCountAllocMap)
	runtime.KeepAlive(cfirstSetAllocMap)
	runtime.KeepAlive(clayoutAllocMap)
	runtime.KeepAlive(cpipelineBindPointAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdBindIndexBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindIndexBuffer.html
func CmdBindIndexBuffer(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize, indexType IndexType) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.VkDeviceSize)(offset), cgoAllocsUnknown
	cindexType, cindexTypeAllocMap := (C.VkIndexType)(indexType), cgoAllocsUnknown
	C.callVkCmdBindIndexBuffer(ccommandBuffer, cbuffer, coffset, cindexType)
	runtime.KeepAlive(cindexTypeAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdBindVertexBuffers function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBindVertexBuffers.html
func CmdBindVertexBuffers(commandBuffer CommandBuffer, firstBinding uint32, bindingCount uint32, pBuffers []Buffer, pOffsets []DeviceSize) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cfirstBinding, cfirstBindingAllocMap := (C.uint32_t)(firstBinding), cgoAllocsUnknown
	cbindingCount, cbindingCountAllocMap := (C.uint32_t)(bindingCount), cgoAllocsUnknown
	cpBuffers, cpBuffersAllocMap := copyPBufferBytes((*sliceHeader)(unsafe.Pointer(&pBuffers)))
	cpOffsets, cpOffsetsAllocMap := copyPDeviceSizeBytes((*sliceHeader)(unsafe.Pointer(&pOffsets)))
	C.callVkCmdBindVertexBuffers(ccommandBuffer, cfirstBinding, cbindingCount, cpBuffers, cpOffsets)
	runtime.KeepAlive(cpOffsetsAllocMap)
	runtime.KeepAlive(cpBuffersAllocMap)
	runtime.KeepAlive(cbindingCountAllocMap)
	runtime.KeepAlive(cfirstBindingAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdDraw function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDraw.html
func CmdDraw(commandBuffer CommandBuffer, vertexCount uint32, instanceCount uint32, firstVertex uint32, firstInstance uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cvertexCount, cvertexCountAllocMap := (C.uint32_t)(vertexCount), cgoAllocsUnknown
	cinstanceCount, cinstanceCountAllocMap := (C.uint32_t)(instanceCount), cgoAllocsUnknown
	cfirstVertex, cfirstVertexAllocMap := (C.uint32_t)(firstVertex), cgoAllocsUnknown
	cfirstInstance, cfirstInstanceAllocMap := (C.uint32_t)(firstInstance), cgoAllocsUnknown
	C.callVkCmdDraw(ccommandBuffer, cvertexCount, cinstanceCount, cfirstVertex, cfirstInstance)
	runtime.KeepAlive(cfirstInstanceAllocMap)
	runtime.KeepAlive(cfirstVertexAllocMap)
	runtime.KeepAlive(cinstanceCountAllocMap)
	runtime.KeepAlive(cvertexCountAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdDrawIndexed function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDrawIndexed.html
func CmdDrawIndexed(commandBuffer CommandBuffer, indexCount uint32, instanceCount uint32, firstIndex uint32, vertexOffset int32, firstInstance uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cindexCount, cindexCountAllocMap := (C.uint32_t)(indexCount), cgoAllocsUnknown
	cinstanceCount, cinstanceCountAllocMap := (C.uint32_t)(instanceCount), cgoAllocsUnknown
	cfirstIndex, cfirstIndexAllocMap := (C.uint32_t)(firstIndex), cgoAllocsUnknown
	cvertexOffset, cvertexOffsetAllocMap := (C.int32_t)(vertexOffset), cgoAllocsUnknown
	cfirstInstance, cfirstInstanceAllocMap := (C.uint32_t)(firstInstance), cgoAllocsUnknown
	C.callVkCmdDrawIndexed(ccommandBuffer, cindexCount, cinstanceCount, cfirstIndex, cvertexOffset, cfirstInstance)
	runtime.KeepAlive(cfirstInstanceAllocMap)
	runtime.KeepAlive(cvertexOffsetAllocMap)
	runtime.KeepAlive(cfirstIndexAllocMap)
	runtime.KeepAlive(cinstanceCountAllocMap)
	runtime.KeepAlive(cindexCountAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdDrawIndirect function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDrawIndirect.html
func CmdDrawIndirect(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize, drawCount uint32, stride uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.VkDeviceSize)(offset), cgoAllocsUnknown
	cdrawCount, cdrawCountAllocMap := (C.uint32_t)(drawCount), cgoAllocsUnknown
	cstride, cstrideAllocMap := (C.uint32_t)(stride), cgoAllocsUnknown
	C.callVkCmdDrawIndirect(ccommandBuffer, cbuffer, coffset, cdrawCount, cstride)
	runtime.KeepAlive(cstrideAllocMap)
	runtime.KeepAlive(cdrawCountAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdDrawIndexedIndirect function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDrawIndexedIndirect.html
func CmdDrawIndexedIndirect(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize, drawCount uint32, stride uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.VkDeviceSize)(offset), cgoAllocsUnknown
	cdrawCount, cdrawCountAllocMap := (C.uint32_t)(drawCount), cgoAllocsUnknown
	cstride, cstrideAllocMap := (C.uint32_t)(stride), cgoAllocsUnknown
	C.callVkCmdDrawIndexedIndirect(ccommandBuffer, cbuffer, coffset, cdrawCount, cstride)
	runtime.KeepAlive(cstrideAllocMap)
	runtime.KeepAlive(cdrawCountAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdDispatch function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDispatch.html
func CmdDispatch(commandBuffer CommandBuffer, x uint32, y uint32, z uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cx, cxAllocMap := (C.uint32_t)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.uint32_t)(y), cgoAllocsUnknown
	cz, czAllocMap := (C.uint32_t)(z), cgoAllocsUnknown
	C.callVkCmdDispatch(ccommandBuffer, cx, cy, cz)
	runtime.KeepAlive(czAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdDispatchIndirect function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdDispatchIndirect.html
func CmdDispatchIndirect(commandBuffer CommandBuffer, buffer Buffer, offset DeviceSize) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.VkDeviceSize)(offset), cgoAllocsUnknown
	C.callVkCmdDispatchIndirect(ccommandBuffer, cbuffer, coffset)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdCopyBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyBuffer.html
func CmdCopyBuffer(commandBuffer CommandBuffer, srcBuffer Buffer, dstBuffer Buffer, regionCount uint32, pRegions []BufferCopy) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	csrcBuffer, csrcBufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&srcBuffer)), cgoAllocsUnknown
	cdstBuffer, cdstBufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer)), cgoAllocsUnknown
	cregionCount, cregionCountAllocMap := (C.uint32_t)(regionCount), cgoAllocsUnknown
	cpRegions, cpRegionsAllocMap := unpackArgSBufferCopy(pRegions)
	C.callVkCmdCopyBuffer(ccommandBuffer, csrcBuffer, cdstBuffer, cregionCount, cpRegions)
	packSBufferCopy(pRegions, cpRegions)
	runtime.KeepAlive(cpRegionsAllocMap)
	runtime.KeepAlive(cregionCountAllocMap)
	runtime.KeepAlive(cdstBufferAllocMap)
	runtime.KeepAlive(csrcBufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdCopyImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyImage.html
func CmdCopyImage(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions []ImageCopy) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	csrcImage, csrcImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&srcImage)), cgoAllocsUnknown
	csrcImageLayout, csrcImageLayoutAllocMap := (C.VkImageLayout)(srcImageLayout), cgoAllocsUnknown
	cdstImage, cdstImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&dstImage)), cgoAllocsUnknown
	cdstImageLayout, cdstImageLayoutAllocMap := (C.VkImageLayout)(dstImageLayout), cgoAllocsUnknown
	cregionCount, cregionCountAllocMap := (C.uint32_t)(regionCount), cgoAllocsUnknown
	cpRegions, cpRegionsAllocMap := unpackArgSImageCopy(pRegions)
	C.callVkCmdCopyImage(ccommandBuffer, csrcImage, csrcImageLayout, cdstImage, cdstImageLayout, cregionCount, cpRegions)
	packSImageCopy(pRegions, cpRegions)
	runtime.KeepAlive(cpRegionsAllocMap)
	runtime.KeepAlive(cregionCountAllocMap)
	runtime.KeepAlive(cdstImageLayoutAllocMap)
	runtime.KeepAlive(cdstImageAllocMap)
	runtime.KeepAlive(csrcImageLayoutAllocMap)
	runtime.KeepAlive(csrcImageAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdBlitImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBlitImage.html
func CmdBlitImage(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions []ImageBlit, filter Filter) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	csrcImage, csrcImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&srcImage)), cgoAllocsUnknown
	csrcImageLayout, csrcImageLayoutAllocMap := (C.VkImageLayout)(srcImageLayout), cgoAllocsUnknown
	cdstImage, cdstImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&dstImage)), cgoAllocsUnknown
	cdstImageLayout, cdstImageLayoutAllocMap := (C.VkImageLayout)(dstImageLayout), cgoAllocsUnknown
	cregionCount, cregionCountAllocMap := (C.uint32_t)(regionCount), cgoAllocsUnknown
	cpRegions, cpRegionsAllocMap := unpackArgSImageBlit(pRegions)
	cfilter, cfilterAllocMap := (C.VkFilter)(filter), cgoAllocsUnknown
	C.callVkCmdBlitImage(ccommandBuffer, csrcImage, csrcImageLayout, cdstImage, cdstImageLayout, cregionCount, cpRegions, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	packSImageBlit(pRegions, cpRegions)
	runtime.KeepAlive(cpRegionsAllocMap)
	runtime.KeepAlive(cregionCountAllocMap)
	runtime.KeepAlive(cdstImageLayoutAllocMap)
	runtime.KeepAlive(cdstImageAllocMap)
	runtime.KeepAlive(csrcImageLayoutAllocMap)
	runtime.KeepAlive(csrcImageAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdCopyBufferToImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyBufferToImage.html
func CmdCopyBufferToImage(commandBuffer CommandBuffer, srcBuffer Buffer, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions []BufferImageCopy) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	csrcBuffer, csrcBufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&srcBuffer)), cgoAllocsUnknown
	cdstImage, cdstImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&dstImage)), cgoAllocsUnknown
	cdstImageLayout, cdstImageLayoutAllocMap := (C.VkImageLayout)(dstImageLayout), cgoAllocsUnknown
	cregionCount, cregionCountAllocMap := (C.uint32_t)(regionCount), cgoAllocsUnknown
	cpRegions, cpRegionsAllocMap := unpackArgSBufferImageCopy(pRegions)
	C.callVkCmdCopyBufferToImage(ccommandBuffer, csrcBuffer, cdstImage, cdstImageLayout, cregionCount, cpRegions)
	packSBufferImageCopy(pRegions, cpRegions)
	runtime.KeepAlive(cpRegionsAllocMap)
	runtime.KeepAlive(cregionCountAllocMap)
	runtime.KeepAlive(cdstImageLayoutAllocMap)
	runtime.KeepAlive(cdstImageAllocMap)
	runtime.KeepAlive(csrcBufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdCopyImageToBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyImageToBuffer.html
func CmdCopyImageToBuffer(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstBuffer Buffer, regionCount uint32, pRegions []BufferImageCopy) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	csrcImage, csrcImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&srcImage)), cgoAllocsUnknown
	csrcImageLayout, csrcImageLayoutAllocMap := (C.VkImageLayout)(srcImageLayout), cgoAllocsUnknown
	cdstBuffer, cdstBufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer)), cgoAllocsUnknown
	cregionCount, cregionCountAllocMap := (C.uint32_t)(regionCount), cgoAllocsUnknown
	cpRegions, cpRegionsAllocMap := unpackArgSBufferImageCopy(pRegions)
	C.callVkCmdCopyImageToBuffer(ccommandBuffer, csrcImage, csrcImageLayout, cdstBuffer, cregionCount, cpRegions)
	packSBufferImageCopy(pRegions, cpRegions)
	runtime.KeepAlive(cpRegionsAllocMap)
	runtime.KeepAlive(cregionCountAllocMap)
	runtime.KeepAlive(cdstBufferAllocMap)
	runtime.KeepAlive(csrcImageLayoutAllocMap)
	runtime.KeepAlive(csrcImageAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdUpdateBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdUpdateBuffer.html
func CmdUpdateBuffer(commandBuffer CommandBuffer, dstBuffer Buffer, dstOffset DeviceSize, dataSize DeviceSize, pData *uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cdstBuffer, cdstBufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer)), cgoAllocsUnknown
	cdstOffset, cdstOffsetAllocMap := (C.VkDeviceSize)(dstOffset), cgoAllocsUnknown
	cdataSize, cdataSizeAllocMap := (C.VkDeviceSize)(dataSize), cgoAllocsUnknown
	cpData, cpDataAllocMap := (*C.uint32_t)(unsafe.Pointer(pData)), cgoAllocsUnknown
	C.callVkCmdUpdateBuffer(ccommandBuffer, cdstBuffer, cdstOffset, cdataSize, cpData)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cdataSizeAllocMap)
	runtime.KeepAlive(cdstOffsetAllocMap)
	runtime.KeepAlive(cdstBufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdFillBuffer function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdFillBuffer.html
func CmdFillBuffer(commandBuffer CommandBuffer, dstBuffer Buffer, dstOffset DeviceSize, size DeviceSize, data uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cdstBuffer, cdstBufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer)), cgoAllocsUnknown
	cdstOffset, cdstOffsetAllocMap := (C.VkDeviceSize)(dstOffset), cgoAllocsUnknown
	csize, csizeAllocMap := (C.VkDeviceSize)(size), cgoAllocsUnknown
	cdata, cdataAllocMap := (C.uint32_t)(data), cgoAllocsUnknown
	C.callVkCmdFillBuffer(ccommandBuffer, cdstBuffer, cdstOffset, csize, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cdstOffsetAllocMap)
	runtime.KeepAlive(cdstBufferAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdClearColorImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdClearColorImage.html
func CmdClearColorImage(commandBuffer CommandBuffer, image Image, imageLayout ImageLayout, pColor *ClearColorValue, rangeCount uint32, pRanges []ImageSubresourceRange) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cimage, cimageAllocMap := *(*C.VkImage)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cimageLayout, cimageLayoutAllocMap := (C.VkImageLayout)(imageLayout), cgoAllocsUnknown
	cpColor, cpColorAllocMap := (*C.VkClearColorValue)(unsafe.Pointer(pColor)), cgoAllocsUnknown
	crangeCount, crangeCountAllocMap := (C.uint32_t)(rangeCount), cgoAllocsUnknown
	cpRanges, cpRangesAllocMap := unpackArgSImageSubresourceRange(pRanges)
	C.callVkCmdClearColorImage(ccommandBuffer, cimage, cimageLayout, cpColor, crangeCount, cpRanges)
	packSImageSubresourceRange(pRanges, cpRanges)
	runtime.KeepAlive(cpRangesAllocMap)
	runtime.KeepAlive(crangeCountAllocMap)
	runtime.KeepAlive(cpColorAllocMap)
	runtime.KeepAlive(cimageLayoutAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdClearDepthStencilImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdClearDepthStencilImage.html
func CmdClearDepthStencilImage(commandBuffer CommandBuffer, image Image, imageLayout ImageLayout, pDepthStencil *ClearDepthStencilValue, rangeCount uint32, pRanges []ImageSubresourceRange) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cimage, cimageAllocMap := *(*C.VkImage)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cimageLayout, cimageLayoutAllocMap := (C.VkImageLayout)(imageLayout), cgoAllocsUnknown
	cpDepthStencil, cpDepthStencilAllocMap := pDepthStencil.PassRef()
	crangeCount, crangeCountAllocMap := (C.uint32_t)(rangeCount), cgoAllocsUnknown
	cpRanges, cpRangesAllocMap := unpackArgSImageSubresourceRange(pRanges)
	C.callVkCmdClearDepthStencilImage(ccommandBuffer, cimage, cimageLayout, cpDepthStencil, crangeCount, cpRanges)
	packSImageSubresourceRange(pRanges, cpRanges)
	runtime.KeepAlive(cpRangesAllocMap)
	runtime.KeepAlive(crangeCountAllocMap)
	runtime.KeepAlive(cpDepthStencilAllocMap)
	runtime.KeepAlive(cimageLayoutAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdClearAttachments function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdClearAttachments.html
func CmdClearAttachments(commandBuffer CommandBuffer, attachmentCount uint32, pAttachments []ClearAttachment, rectCount uint32, pRects []ClearRect) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cattachmentCount, cattachmentCountAllocMap := (C.uint32_t)(attachmentCount), cgoAllocsUnknown
	cpAttachments, cpAttachmentsAllocMap := unpackArgSClearAttachment(pAttachments)
	crectCount, crectCountAllocMap := (C.uint32_t)(rectCount), cgoAllocsUnknown
	cpRects, cpRectsAllocMap := unpackArgSClearRect(pRects)
	C.callVkCmdClearAttachments(ccommandBuffer, cattachmentCount, cpAttachments, crectCount, cpRects)
	packSClearRect(pRects, cpRects)
	runtime.KeepAlive(cpRectsAllocMap)
	runtime.KeepAlive(crectCountAllocMap)
	packSClearAttachment(pAttachments, cpAttachments)
	runtime.KeepAlive(cpAttachmentsAllocMap)
	runtime.KeepAlive(cattachmentCountAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdResolveImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdResolveImage.html
func CmdResolveImage(commandBuffer CommandBuffer, srcImage Image, srcImageLayout ImageLayout, dstImage Image, dstImageLayout ImageLayout, regionCount uint32, pRegions []ImageResolve) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	csrcImage, csrcImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&srcImage)), cgoAllocsUnknown
	csrcImageLayout, csrcImageLayoutAllocMap := (C.VkImageLayout)(srcImageLayout), cgoAllocsUnknown
	cdstImage, cdstImageAllocMap := *(*C.VkImage)(unsafe.Pointer(&dstImage)), cgoAllocsUnknown
	cdstImageLayout, cdstImageLayoutAllocMap := (C.VkImageLayout)(dstImageLayout), cgoAllocsUnknown
	cregionCount, cregionCountAllocMap := (C.uint32_t)(regionCount), cgoAllocsUnknown
	cpRegions, cpRegionsAllocMap := unpackArgSImageResolve(pRegions)
	C.callVkCmdResolveImage(ccommandBuffer, csrcImage, csrcImageLayout, cdstImage, cdstImageLayout, cregionCount, cpRegions)
	packSImageResolve(pRegions, cpRegions)
	runtime.KeepAlive(cpRegionsAllocMap)
	runtime.KeepAlive(cregionCountAllocMap)
	runtime.KeepAlive(cdstImageLayoutAllocMap)
	runtime.KeepAlive(cdstImageAllocMap)
	runtime.KeepAlive(csrcImageLayoutAllocMap)
	runtime.KeepAlive(csrcImageAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdSetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdSetEvent.html
func CmdSetEvent(commandBuffer CommandBuffer, event Event, stageMask PipelineStageFlags) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cevent, ceventAllocMap := *(*C.VkEvent)(unsafe.Pointer(&event)), cgoAllocsUnknown
	cstageMask, cstageMaskAllocMap := (C.VkPipelineStageFlags)(stageMask), cgoAllocsUnknown
	C.callVkCmdSetEvent(ccommandBuffer, cevent, cstageMask)
	runtime.KeepAlive(cstageMaskAllocMap)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdResetEvent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdResetEvent.html
func CmdResetEvent(commandBuffer CommandBuffer, event Event, stageMask PipelineStageFlags) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cevent, ceventAllocMap := *(*C.VkEvent)(unsafe.Pointer(&event)), cgoAllocsUnknown
	cstageMask, cstageMaskAllocMap := (C.VkPipelineStageFlags)(stageMask), cgoAllocsUnknown
	C.callVkCmdResetEvent(ccommandBuffer, cevent, cstageMask)
	runtime.KeepAlive(cstageMaskAllocMap)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdWaitEvents function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdWaitEvents.html
func CmdWaitEvents(commandBuffer CommandBuffer, eventCount uint32, pEvents []Event, srcStageMask PipelineStageFlags, dstStageMask PipelineStageFlags, memoryBarrierCount uint32, pMemoryBarriers []MemoryBarrier, bufferMemoryBarrierCount uint32, pBufferMemoryBarriers []BufferMemoryBarrier, imageMemoryBarrierCount uint32, pImageMemoryBarriers []ImageMemoryBarrier) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	ceventCount, ceventCountAllocMap := (C.uint32_t)(eventCount), cgoAllocsUnknown
	cpEvents, cpEventsAllocMap := copyPEventBytes((*sliceHeader)(unsafe.Pointer(&pEvents)))
	csrcStageMask, csrcStageMaskAllocMap := (C.VkPipelineStageFlags)(srcStageMask), cgoAllocsUnknown
	cdstStageMask, cdstStageMaskAllocMap := (C.VkPipelineStageFlags)(dstStageMask), cgoAllocsUnknown
	cmemoryBarrierCount, cmemoryBarrierCountAllocMap := (C.uint32_t)(memoryBarrierCount), cgoAllocsUnknown
	cpMemoryBarriers, cpMemoryBarriersAllocMap := unpackArgSMemoryBarrier(pMemoryBarriers)
	cbufferMemoryBarrierCount, cbufferMemoryBarrierCountAllocMap := (C.uint32_t)(bufferMemoryBarrierCount), cgoAllocsUnknown
	cpBufferMemoryBarriers, cpBufferMemoryBarriersAllocMap := unpackArgSBufferMemoryBarrier(pBufferMemoryBarriers)
	cimageMemoryBarrierCount, cimageMemoryBarrierCountAllocMap := (C.uint32_t)(imageMemoryBarrierCount), cgoAllocsUnknown
	cpImageMemoryBarriers, cpImageMemoryBarriersAllocMap := unpackArgSImageMemoryBarrier(pImageMemoryBarriers)
	C.callVkCmdWaitEvents(ccommandBuffer, ceventCount, cpEvents, csrcStageMask, cdstStageMask, cmemoryBarrierCount, cpMemoryBarriers, cbufferMemoryBarrierCount, cpBufferMemoryBarriers, cimageMemoryBarrierCount, cpImageMemoryBarriers)
	packSImageMemoryBarrier(pImageMemoryBarriers, cpImageMemoryBarriers)
	runtime.KeepAlive(cpImageMemoryBarriersAllocMap)
	runtime.KeepAlive(cimageMemoryBarrierCountAllocMap)
	packSBufferMemoryBarrier(pBufferMemoryBarriers, cpBufferMemoryBarriers)
	runtime.KeepAlive(cpBufferMemoryBarriersAllocMap)
	runtime.KeepAlive(cbufferMemoryBarrierCountAllocMap)
	packSMemoryBarrier(pMemoryBarriers, cpMemoryBarriers)
	runtime.KeepAlive(cpMemoryBarriersAllocMap)
	runtime.KeepAlive(cmemoryBarrierCountAllocMap)
	runtime.KeepAlive(cdstStageMaskAllocMap)
	runtime.KeepAlive(csrcStageMaskAllocMap)
	runtime.KeepAlive(cpEventsAllocMap)
	runtime.KeepAlive(ceventCountAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdPipelineBarrier function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdPipelineBarrier.html
func CmdPipelineBarrier(commandBuffer CommandBuffer, srcStageMask PipelineStageFlags, dstStageMask PipelineStageFlags, dependencyFlags DependencyFlags, memoryBarrierCount uint32, pMemoryBarriers []MemoryBarrier, bufferMemoryBarrierCount uint32, pBufferMemoryBarriers []BufferMemoryBarrier, imageMemoryBarrierCount uint32, pImageMemoryBarriers []ImageMemoryBarrier) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	csrcStageMask, csrcStageMaskAllocMap := (C.VkPipelineStageFlags)(srcStageMask), cgoAllocsUnknown
	cdstStageMask, cdstStageMaskAllocMap := (C.VkPipelineStageFlags)(dstStageMask), cgoAllocsUnknown
	cdependencyFlags, cdependencyFlagsAllocMap := (C.VkDependencyFlags)(dependencyFlags), cgoAllocsUnknown
	cmemoryBarrierCount, cmemoryBarrierCountAllocMap := (C.uint32_t)(memoryBarrierCount), cgoAllocsUnknown
	cpMemoryBarriers, cpMemoryBarriersAllocMap := unpackArgSMemoryBarrier(pMemoryBarriers)
	cbufferMemoryBarrierCount, cbufferMemoryBarrierCountAllocMap := (C.uint32_t)(bufferMemoryBarrierCount), cgoAllocsUnknown
	cpBufferMemoryBarriers, cpBufferMemoryBarriersAllocMap := unpackArgSBufferMemoryBarrier(pBufferMemoryBarriers)
	cimageMemoryBarrierCount, cimageMemoryBarrierCountAllocMap := (C.uint32_t)(imageMemoryBarrierCount), cgoAllocsUnknown
	cpImageMemoryBarriers, cpImageMemoryBarriersAllocMap := unpackArgSImageMemoryBarrier(pImageMemoryBarriers)
	C.callVkCmdPipelineBarrier(ccommandBuffer, csrcStageMask, cdstStageMask, cdependencyFlags, cmemoryBarrierCount, cpMemoryBarriers, cbufferMemoryBarrierCount, cpBufferMemoryBarriers, cimageMemoryBarrierCount, cpImageMemoryBarriers)
	packSImageMemoryBarrier(pImageMemoryBarriers, cpImageMemoryBarriers)
	runtime.KeepAlive(cpImageMemoryBarriersAllocMap)
	runtime.KeepAlive(cimageMemoryBarrierCountAllocMap)
	packSBufferMemoryBarrier(pBufferMemoryBarriers, cpBufferMemoryBarriers)
	runtime.KeepAlive(cpBufferMemoryBarriersAllocMap)
	runtime.KeepAlive(cbufferMemoryBarrierCountAllocMap)
	packSMemoryBarrier(pMemoryBarriers, cpMemoryBarriers)
	runtime.KeepAlive(cpMemoryBarriersAllocMap)
	runtime.KeepAlive(cmemoryBarrierCountAllocMap)
	runtime.KeepAlive(cdependencyFlagsAllocMap)
	runtime.KeepAlive(cdstStageMaskAllocMap)
	runtime.KeepAlive(csrcStageMaskAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdBeginQuery function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBeginQuery.html
func CmdBeginQuery(commandBuffer CommandBuffer, queryPool QueryPool, query uint32, flags QueryControlFlags) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cqueryPool, cqueryPoolAllocMap := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool)), cgoAllocsUnknown
	cquery, cqueryAllocMap := (C.uint32_t)(query), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkQueryControlFlags)(flags), cgoAllocsUnknown
	C.callVkCmdBeginQuery(ccommandBuffer, cqueryPool, cquery, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cqueryAllocMap)
	runtime.KeepAlive(cqueryPoolAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdEndQuery function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdEndQuery.html
func CmdEndQuery(commandBuffer CommandBuffer, queryPool QueryPool, query uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cqueryPool, cqueryPoolAllocMap := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool)), cgoAllocsUnknown
	cquery, cqueryAllocMap := (C.uint32_t)(query), cgoAllocsUnknown
	C.callVkCmdEndQuery(ccommandBuffer, cqueryPool, cquery)
	runtime.KeepAlive(cqueryAllocMap)
	runtime.KeepAlive(cqueryPoolAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdResetQueryPool function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdResetQueryPool.html
func CmdResetQueryPool(commandBuffer CommandBuffer, queryPool QueryPool, firstQuery uint32, queryCount uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cqueryPool, cqueryPoolAllocMap := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool)), cgoAllocsUnknown
	cfirstQuery, cfirstQueryAllocMap := (C.uint32_t)(firstQuery), cgoAllocsUnknown
	cqueryCount, cqueryCountAllocMap := (C.uint32_t)(queryCount), cgoAllocsUnknown
	C.callVkCmdResetQueryPool(ccommandBuffer, cqueryPool, cfirstQuery, cqueryCount)
	runtime.KeepAlive(cqueryCountAllocMap)
	runtime.KeepAlive(cfirstQueryAllocMap)
	runtime.KeepAlive(cqueryPoolAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdWriteTimestamp function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdWriteTimestamp.html
func CmdWriteTimestamp(commandBuffer CommandBuffer, pipelineStage PipelineStageFlagBits, queryPool QueryPool, query uint32) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cpipelineStage, cpipelineStageAllocMap := (C.VkPipelineStageFlagBits)(pipelineStage), cgoAllocsUnknown
	cqueryPool, cqueryPoolAllocMap := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool)), cgoAllocsUnknown
	cquery, cqueryAllocMap := (C.uint32_t)(query), cgoAllocsUnknown
	C.callVkCmdWriteTimestamp(ccommandBuffer, cpipelineStage, cqueryPool, cquery)
	runtime.KeepAlive(cqueryAllocMap)
	runtime.KeepAlive(cqueryPoolAllocMap)
	runtime.KeepAlive(cpipelineStageAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdCopyQueryPoolResults function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdCopyQueryPoolResults.html
func CmdCopyQueryPoolResults(commandBuffer CommandBuffer, queryPool QueryPool, firstQuery uint32, queryCount uint32, dstBuffer Buffer, dstOffset DeviceSize, stride DeviceSize, flags QueryResultFlags) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cqueryPool, cqueryPoolAllocMap := *(*C.VkQueryPool)(unsafe.Pointer(&queryPool)), cgoAllocsUnknown
	cfirstQuery, cfirstQueryAllocMap := (C.uint32_t)(firstQuery), cgoAllocsUnknown
	cqueryCount, cqueryCountAllocMap := (C.uint32_t)(queryCount), cgoAllocsUnknown
	cdstBuffer, cdstBufferAllocMap := *(*C.VkBuffer)(unsafe.Pointer(&dstBuffer)), cgoAllocsUnknown
	cdstOffset, cdstOffsetAllocMap := (C.VkDeviceSize)(dstOffset), cgoAllocsUnknown
	cstride, cstrideAllocMap := (C.VkDeviceSize)(stride), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkQueryResultFlags)(flags), cgoAllocsUnknown
	C.callVkCmdCopyQueryPoolResults(ccommandBuffer, cqueryPool, cfirstQuery, cqueryCount, cdstBuffer, cdstOffset, cstride, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cstrideAllocMap)
	runtime.KeepAlive(cdstOffsetAllocMap)
	runtime.KeepAlive(cdstBufferAllocMap)
	runtime.KeepAlive(cqueryCountAllocMap)
	runtime.KeepAlive(cfirstQueryAllocMap)
	runtime.KeepAlive(cqueryPoolAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdPushConstants function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdPushConstants.html
func CmdPushConstants(commandBuffer CommandBuffer, layout PipelineLayout, stageFlags ShaderStageFlags, offset uint32, size uint32, pValues unsafe.Pointer) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	clayout, clayoutAllocMap := *(*C.VkPipelineLayout)(unsafe.Pointer(&layout)), cgoAllocsUnknown
	cstageFlags, cstageFlagsAllocMap := (C.VkShaderStageFlags)(stageFlags), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.uint32_t)(offset), cgoAllocsUnknown
	csize, csizeAllocMap := (C.uint32_t)(size), cgoAllocsUnknown
	cpValues, cpValuesAllocMap := pValues, cgoAllocsUnknown
	C.callVkCmdPushConstants(ccommandBuffer, clayout, cstageFlags, coffset, csize, cpValues)
	runtime.KeepAlive(cpValuesAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cstageFlagsAllocMap)
	runtime.KeepAlive(clayoutAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdBeginRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdBeginRenderPass.html
func CmdBeginRenderPass(commandBuffer CommandBuffer, pRenderPassBegin *RenderPassBeginInfo, contents SubpassContents) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	cpRenderPassBegin, cpRenderPassBeginAllocMap := pRenderPassBegin.PassRef()
	ccontents, ccontentsAllocMap := (C.VkSubpassContents)(contents), cgoAllocsUnknown
	C.callVkCmdBeginRenderPass(ccommandBuffer, cpRenderPassBegin, ccontents)
	runtime.KeepAlive(ccontentsAllocMap)
	runtime.KeepAlive(cpRenderPassBeginAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdNextSubpass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdNextSubpass.html
func CmdNextSubpass(commandBuffer CommandBuffer, contents SubpassContents) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	ccontents, ccontentsAllocMap := (C.VkSubpassContents)(contents), cgoAllocsUnknown
	C.callVkCmdNextSubpass(ccommandBuffer, ccontents)
	runtime.KeepAlive(ccontentsAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdEndRenderPass function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdEndRenderPass.html
func CmdEndRenderPass(commandBuffer CommandBuffer) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	C.callVkCmdEndRenderPass(ccommandBuffer)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// CmdExecuteCommands function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCmdExecuteCommands.html
func CmdExecuteCommands(commandBuffer CommandBuffer, commandBufferCount uint32, pCommandBuffers []CommandBuffer) {
	ccommandBuffer, ccommandBufferAllocMap := *(*C.VkCommandBuffer)(unsafe.Pointer(&commandBuffer)), cgoAllocsUnknown
	ccommandBufferCount, ccommandBufferCountAllocMap := (C.uint32_t)(commandBufferCount), cgoAllocsUnknown
	cpCommandBuffers, cpCommandBuffersAllocMap := copyPCommandBufferBytes((*sliceHeader)(unsafe.Pointer(&pCommandBuffers)))
	C.callVkCmdExecuteCommands(ccommandBuffer, ccommandBufferCount, cpCommandBuffers)
	runtime.KeepAlive(cpCommandBuffersAllocMap)
	runtime.KeepAlive(ccommandBufferCountAllocMap)
	runtime.KeepAlive(ccommandBufferAllocMap)
}

// DestroySurface function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkDestroySurfaceKHR
func DestroySurface(instance Instance, surface Surface, pAllocator *AllocationCallbacks) {
	cinstance, cinstanceAllocMap := *(*C.VkInstance)(unsafe.Pointer(&instance)), cgoAllocsUnknown
	csurface, csurfaceAllocMap := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroySurfaceKHR(cinstance, csurface, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(csurfaceAllocMap)
	runtime.KeepAlive(cinstanceAllocMap)
}

// GetPhysicalDeviceSurfaceSupport function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfaceSupportKHR
func GetPhysicalDeviceSurfaceSupport(physicalDevice PhysicalDevice, queueFamilyIndex uint32, surface Surface, pSupported *Bool32) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cqueueFamilyIndex, cqueueFamilyIndexAllocMap := (C.uint32_t)(queueFamilyIndex), cgoAllocsUnknown
	csurface, csurfaceAllocMap := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	cpSupported, cpSupportedAllocMap := (*C.VkBool32)(unsafe.Pointer(pSupported)), cgoAllocsUnknown
	__ret := C.callVkGetPhysicalDeviceSurfaceSupportKHR(cphysicalDevice, cqueueFamilyIndex, csurface, cpSupported)
	runtime.KeepAlive(cpSupportedAllocMap)
	runtime.KeepAlive(csurfaceAllocMap)
	runtime.KeepAlive(cqueueFamilyIndexAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceCapabilities function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfaceCapabilitiesKHR
func GetPhysicalDeviceSurfaceCapabilities(physicalDevice PhysicalDevice, surface Surface, pSurfaceCapabilities *SurfaceCapabilities) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	csurface, csurfaceAllocMap := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	cpSurfaceCapabilities, cpSurfaceCapabilitiesAllocMap := pSurfaceCapabilities.PassRef()
	__ret := C.callVkGetPhysicalDeviceSurfaceCapabilitiesKHR(cphysicalDevice, csurface, cpSurfaceCapabilities)
	runtime.KeepAlive(cpSurfaceCapabilitiesAllocMap)
	runtime.KeepAlive(csurfaceAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceFormats function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfaceFormatsKHR
func GetPhysicalDeviceSurfaceFormats(physicalDevice PhysicalDevice, surface Surface, pSurfaceFormatCount *uint32, pSurfaceFormats []SurfaceFormat) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	csurface, csurfaceAllocMap := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	cpSurfaceFormatCount, cpSurfaceFormatCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pSurfaceFormatCount)), cgoAllocsUnknown
	cpSurfaceFormats, cpSurfaceFormatsAllocMap := unpackArgSSurfaceFormat(pSurfaceFormats)
	__ret := C.callVkGetPhysicalDeviceSurfaceFormatsKHR(cphysicalDevice, csurface, cpSurfaceFormatCount, cpSurfaceFormats)
	packSSurfaceFormat(pSurfaceFormats, cpSurfaceFormats)
	runtime.KeepAlive(cpSurfaceFormatsAllocMap)
	runtime.KeepAlive(cpSurfaceFormatCountAllocMap)
	runtime.KeepAlive(csurfaceAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfacePresentModes function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceSurfacePresentModesKHR
func GetPhysicalDeviceSurfacePresentModes(physicalDevice PhysicalDevice, surface Surface, pPresentModeCount *uint32, pPresentModes []PresentMode) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	csurface, csurfaceAllocMap := *(*C.VkSurfaceKHR)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	cpPresentModeCount, cpPresentModeCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPresentModeCount)), cgoAllocsUnknown
	cpPresentModes, cpPresentModesAllocMap := copyPPresentModeBytes((*sliceHeader)(unsafe.Pointer(&pPresentModes)))
	__ret := C.callVkGetPhysicalDeviceSurfacePresentModesKHR(cphysicalDevice, csurface, cpPresentModeCount, cpPresentModes)
	runtime.KeepAlive(cpPresentModesAllocMap)
	runtime.KeepAlive(cpPresentModeCountAllocMap)
	runtime.KeepAlive(csurfaceAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateSwapchain function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateSwapchainKHR
func CreateSwapchain(device Device, pCreateInfo *SwapchainCreateInfo, pAllocator *AllocationCallbacks, pSwapchain *Swapchain) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpSwapchain, cpSwapchainAllocMap := (*C.VkSwapchainKHR)(unsafe.Pointer(pSwapchain)), cgoAllocsUnknown
	__ret := C.callVkCreateSwapchainKHR(cdevice, cpCreateInfo, cpAllocator, cpSwapchain)
	runtime.KeepAlive(cpSwapchainAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroySwapchain function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkDestroySwapchainKHR
func DestroySwapchain(device Device, swapchain Swapchain, pAllocator *AllocationCallbacks) {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cswapchain, cswapchainAllocMap := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroySwapchainKHR(cdevice, cswapchain, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cswapchainAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
}

// GetSwapchainImages function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetSwapchainImagesKHR
func GetSwapchainImages(device Device, swapchain Swapchain, pSwapchainImageCount *uint32, pSwapchainImages []Image) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cswapchain, cswapchainAllocMap := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain)), cgoAllocsUnknown
	cpSwapchainImageCount, cpSwapchainImageCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pSwapchainImageCount)), cgoAllocsUnknown
	cpSwapchainImages, cpSwapchainImagesAllocMap := copyPImageBytes((*sliceHeader)(unsafe.Pointer(&pSwapchainImages)))
	__ret := C.callVkGetSwapchainImagesKHR(cdevice, cswapchain, cpSwapchainImageCount, cpSwapchainImages)
	runtime.KeepAlive(cpSwapchainImagesAllocMap)
	runtime.KeepAlive(cpSwapchainImageCountAllocMap)
	runtime.KeepAlive(cswapchainAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// AcquireNextImage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkAcquireNextImageKHR
func AcquireNextImage(device Device, swapchain Swapchain, timeout uint32, semaphore Semaphore, fence Fence, pImageIndex *uint32) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cswapchain, cswapchainAllocMap := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain)), cgoAllocsUnknown
	ctimeout, ctimeoutAllocMap := (C.uint64_t)(timeout), cgoAllocsUnknown
	csemaphore, csemaphoreAllocMap := *(*C.VkSemaphore)(unsafe.Pointer(&semaphore)), cgoAllocsUnknown
	cfence, cfenceAllocMap := *(*C.VkFence)(unsafe.Pointer(&fence)), cgoAllocsUnknown
	cpImageIndex, cpImageIndexAllocMap := (*C.uint32_t)(unsafe.Pointer(pImageIndex)), cgoAllocsUnknown
	__ret := C.callVkAcquireNextImageKHR(cdevice, cswapchain, ctimeout, csemaphore, cfence, cpImageIndex)
	runtime.KeepAlive(cpImageIndexAllocMap)
	runtime.KeepAlive(cfenceAllocMap)
	runtime.KeepAlive(csemaphoreAllocMap)
	runtime.KeepAlive(ctimeoutAllocMap)
	runtime.KeepAlive(cswapchainAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// QueuePresent function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkQueuePresentKHR
func QueuePresent(queue Queue, pPresentInfo *PresentInfo) Result {
	cqueue, cqueueAllocMap := *(*C.VkQueue)(unsafe.Pointer(&queue)), cgoAllocsUnknown
	cpPresentInfo, cpPresentInfoAllocMap := pPresentInfo.PassRef()
	__ret := C.callVkQueuePresentKHR(cqueue, cpPresentInfo)
	runtime.KeepAlive(cpPresentInfoAllocMap)
	runtime.KeepAlive(cqueueAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceDisplayPropertiesKHR
func GetPhysicalDeviceDisplayProperties(physicalDevice PhysicalDevice, pPropertyCount *uint32, pProperties []DisplayProperties) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpPropertyCount, cpPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPropertyCount)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := unpackArgSDisplayProperties(pProperties)
	__ret := C.callVkGetPhysicalDeviceDisplayPropertiesKHR(cphysicalDevice, cpPropertyCount, cpProperties)
	packSDisplayProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayPlaneProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetPhysicalDeviceDisplayPlanePropertiesKHR
func GetPhysicalDeviceDisplayPlaneProperties(physicalDevice PhysicalDevice, pPropertyCount *uint32, pProperties []DisplayPlaneProperties) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cpPropertyCount, cpPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPropertyCount)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := unpackArgSDisplayPlaneProperties(pProperties)
	__ret := C.callVkGetPhysicalDeviceDisplayPlanePropertiesKHR(cphysicalDevice, cpPropertyCount, cpProperties)
	packSDisplayPlaneProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneSupportedDisplays function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetDisplayPlaneSupportedDisplaysKHR
func GetDisplayPlaneSupportedDisplays(physicalDevice PhysicalDevice, planeIndex uint32, pDisplayCount *uint32, pDisplays []Display) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cplaneIndex, cplaneIndexAllocMap := (C.uint32_t)(planeIndex), cgoAllocsUnknown
	cpDisplayCount, cpDisplayCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pDisplayCount)), cgoAllocsUnknown
	cpDisplays, cpDisplaysAllocMap := copyPDisplayBytes((*sliceHeader)(unsafe.Pointer(&pDisplays)))
	__ret := C.callVkGetDisplayPlaneSupportedDisplaysKHR(cphysicalDevice, cplaneIndex, cpDisplayCount, cpDisplays)
	runtime.KeepAlive(cpDisplaysAllocMap)
	runtime.KeepAlive(cpDisplayCountAllocMap)
	runtime.KeepAlive(cplaneIndexAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayModeProperties function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetDisplayModePropertiesKHR
func GetDisplayModeProperties(physicalDevice PhysicalDevice, display Display, pPropertyCount *uint32, pProperties []DisplayModeProperties) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cdisplay, cdisplayAllocMap := *(*C.VkDisplayKHR)(unsafe.Pointer(&display)), cgoAllocsUnknown
	cpPropertyCount, cpPropertyCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPropertyCount)), cgoAllocsUnknown
	cpProperties, cpPropertiesAllocMap := unpackArgSDisplayModeProperties(pProperties)
	__ret := C.callVkGetDisplayModePropertiesKHR(cphysicalDevice, cdisplay, cpPropertyCount, cpProperties)
	packSDisplayModeProperties(pProperties, cpProperties)
	runtime.KeepAlive(cpPropertiesAllocMap)
	runtime.KeepAlive(cpPropertyCountAllocMap)
	runtime.KeepAlive(cdisplayAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayMode function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateDisplayModeKHR
func CreateDisplayMode(physicalDevice PhysicalDevice, display Display, pCreateInfo *DisplayModeCreateInfo, pAllocator *AllocationCallbacks, pMode *DisplayMode) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cdisplay, cdisplayAllocMap := *(*C.VkDisplayKHR)(unsafe.Pointer(&display)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpMode, cpModeAllocMap := (*C.VkDisplayModeKHR)(unsafe.Pointer(pMode)), cgoAllocsUnknown
	__ret := C.callVkCreateDisplayModeKHR(cphysicalDevice, cdisplay, cpCreateInfo, cpAllocator, cpMode)
	runtime.KeepAlive(cpModeAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cdisplayAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneCapabilities function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkGetDisplayPlaneCapabilitiesKHR
func GetDisplayPlaneCapabilities(physicalDevice PhysicalDevice, mode DisplayMode, planeIndex uint32, pCapabilities *DisplayPlaneCapabilities) Result {
	cphysicalDevice, cphysicalDeviceAllocMap := *(*C.VkPhysicalDevice)(unsafe.Pointer(&physicalDevice)), cgoAllocsUnknown
	cmode, cmodeAllocMap := *(*C.VkDisplayModeKHR)(unsafe.Pointer(&mode)), cgoAllocsUnknown
	cplaneIndex, cplaneIndexAllocMap := (C.uint32_t)(planeIndex), cgoAllocsUnknown
	cpCapabilities, cpCapabilitiesAllocMap := pCapabilities.PassRef()
	__ret := C.callVkGetDisplayPlaneCapabilitiesKHR(cphysicalDevice, cmode, cplaneIndex, cpCapabilities)
	runtime.KeepAlive(cpCapabilitiesAllocMap)
	runtime.KeepAlive(cplaneIndexAllocMap)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(cphysicalDeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayPlaneSurface function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateDisplayPlaneSurfaceKHR
func CreateDisplayPlaneSurface(instance Instance, pCreateInfo *DisplaySurfaceCreateInfo, pAllocator *AllocationCallbacks, pSurface *Surface) Result {
	cinstance, cinstanceAllocMap := *(*C.VkInstance)(unsafe.Pointer(&instance)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpSurface, cpSurfaceAllocMap := (*C.VkSurfaceKHR)(unsafe.Pointer(pSurface)), cgoAllocsUnknown
	__ret := C.callVkCreateDisplayPlaneSurfaceKHR(cinstance, cpCreateInfo, cpAllocator, cpSurface)
	runtime.KeepAlive(cpSurfaceAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cinstanceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateSharedSwapchains function as declared in https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#VkCreateSharedSwapchainsKHR
func CreateSharedSwapchains(device Device, swapchainCount uint32, pCreateInfos []SwapchainCreateInfo, pAllocator *AllocationCallbacks, pSwapchains *Swapchain) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cswapchainCount, cswapchainCountAllocMap := (C.uint32_t)(swapchainCount), cgoAllocsUnknown
	cpCreateInfos, cpCreateInfosAllocMap := unpackArgSSwapchainCreateInfo(pCreateInfos)
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpSwapchains, cpSwapchainsAllocMap := (*C.VkSwapchainKHR)(unsafe.Pointer(pSwapchains)), cgoAllocsUnknown
	__ret := C.callVkCreateSharedSwapchainsKHR(cdevice, cswapchainCount, cpCreateInfos, cpAllocator, cpSwapchains)
	runtime.KeepAlive(cpSwapchainsAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	packSSwapchainCreateInfo(pCreateInfos, cpCreateInfos)
	runtime.KeepAlive(cpCreateInfosAllocMap)
	runtime.KeepAlive(cswapchainCountAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// CreateDebugReportCallback function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkCreateDebugReportCallbackEXT.html
func CreateDebugReportCallback(instance Instance, pCreateInfo *DebugReportCallbackCreateInfo, pAllocator *AllocationCallbacks, pCallback *DebugReportCallback) Result {
	cinstance, cinstanceAllocMap := *(*C.VkInstance)(unsafe.Pointer(&instance)), cgoAllocsUnknown
	cpCreateInfo, cpCreateInfoAllocMap := pCreateInfo.PassRef()
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	cpCallback, cpCallbackAllocMap := (*C.VkDebugReportCallbackEXT)(unsafe.Pointer(pCallback)), cgoAllocsUnknown
	__ret := C.callVkCreateDebugReportCallbackEXT(cinstance, cpCreateInfo, cpAllocator, cpCallback)
	runtime.KeepAlive(cpCallbackAllocMap)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(cpCreateInfoAllocMap)
	runtime.KeepAlive(cinstanceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// DestroyDebugReportCallback function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDestroyDebugReportCallbackEXT.html
func DestroyDebugReportCallback(instance Instance, callback DebugReportCallback, pAllocator *AllocationCallbacks) {
	cinstance, cinstanceAllocMap := *(*C.VkInstance)(unsafe.Pointer(&instance)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := *(*C.VkDebugReportCallbackEXT)(unsafe.Pointer(&callback)), cgoAllocsUnknown
	cpAllocator, cpAllocatorAllocMap := (*C.VkAllocationCallbacks)(unsafe.Pointer(pAllocator)), cgoAllocsUnknown
	C.callVkDestroyDebugReportCallbackEXT(cinstance, ccallback, cpAllocator)
	runtime.KeepAlive(cpAllocatorAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cinstanceAllocMap)
}

// DebugReportMessage function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkDebugReportMessageEXT.html
func DebugReportMessage(instance Instance, flags DebugReportFlags, objectType DebugReportObjectType, object uint32, location uint32, messageCode int32, pLayerPrefix string, pMessage string) {
	cinstance, cinstanceAllocMap := *(*C.VkInstance)(unsafe.Pointer(&instance)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.VkDebugReportFlagsEXT)(flags), cgoAllocsUnknown
	cobjectType, cobjectTypeAllocMap := (C.VkDebugReportObjectTypeEXT)(objectType), cgoAllocsUnknown
	cobject, cobjectAllocMap := (C.uint64_t)(object), cgoAllocsUnknown
	clocation, clocationAllocMap := (C.size_t)(location), cgoAllocsUnknown
	cmessageCode, cmessageCodeAllocMap := (C.int32_t)(messageCode), cgoAllocsUnknown
	cpLayerPrefix, cpLayerPrefixAllocMap := unpackPCharString(pLayerPrefix)
	cpMessage, cpMessageAllocMap := unpackPCharString(pMessage)
	C.callVkDebugReportMessageEXT(cinstance, cflags, cobjectType, cobject, clocation, cmessageCode, cpLayerPrefix, cpMessage)
	runtime.KeepAlive(cpMessageAllocMap)
	runtime.KeepAlive(cpLayerPrefixAllocMap)
	runtime.KeepAlive(cmessageCodeAllocMap)
	runtime.KeepAlive(clocationAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cobjectTypeAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cinstanceAllocMap)
}

// GetRefreshCycleDurationGOOGLE function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetRefreshCycleDurationGOOGLE.html
func GetRefreshCycleDurationGOOGLE(device Device, swapchain Swapchain, pDisplayTimingProperties *RefreshCycleDurationGOOGLE) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cswapchain, cswapchainAllocMap := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain)), cgoAllocsUnknown
	cpDisplayTimingProperties, cpDisplayTimingPropertiesAllocMap := pDisplayTimingProperties.PassRef()
	__ret := C.callVkGetRefreshCycleDurationGOOGLE(cdevice, cswapchain, cpDisplayTimingProperties)
	runtime.KeepAlive(cpDisplayTimingPropertiesAllocMap)
	runtime.KeepAlive(cswapchainAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}

// GetPastPresentationTimingGOOGLE function as declared in https://www.khronos.org/registry/vulkan/specs/1.0/man/html/vkGetPastPresentationTimingGOOGLE.html
func GetPastPresentationTimingGOOGLE(device Device, swapchain Swapchain, pPresentationTimingCount *uint32, pPresentationTimings *PastPresentationTimingGOOGLE) Result {
	cdevice, cdeviceAllocMap := *(*C.VkDevice)(unsafe.Pointer(&device)), cgoAllocsUnknown
	cswapchain, cswapchainAllocMap := *(*C.VkSwapchainKHR)(unsafe.Pointer(&swapchain)), cgoAllocsUnknown
	cpPresentationTimingCount, cpPresentationTimingCountAllocMap := (*C.uint32_t)(unsafe.Pointer(pPresentationTimingCount)), cgoAllocsUnknown
	cpPresentationTimings, cpPresentationTimingsAllocMap := pPresentationTimings.PassRef()
	__ret := C.callVkGetPastPresentationTimingGOOGLE(cdevice, cswapchain, cpPresentationTimingCount, cpPresentationTimings)
	runtime.KeepAlive(cpPresentationTimingsAllocMap)
	runtime.KeepAlive(cpPresentationTimingCountAllocMap)
	runtime.KeepAlive(cswapchainAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Result)(__ret)
	return __v
}
